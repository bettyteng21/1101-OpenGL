/***************************
4108056007 鄧雅文 第6-VI次作業12/22
***************************/
#include <GL/glew.h>
#include <GL/freeglut.h>
#include <Windows.h>
#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctime>
#include "objImporter.h"
#include <string.h>
#include <string>

#define step_size 0.1
#define gravity 0.1
#define shot 30
#define PI 3.1415
#define total_enemy 3

char move_dir = 'q';
float view_x = 0.0, view_z = 0.0, fire_z=0.0, logo_z=7.0, explode_rad=1.0, jump_y=0.0, attack_z = 0.0;
int year = 0, day = 0, logo_angle=0, jump_time=0, enemy_attack=0;
//enemy_attack: 現在是誰在攻擊, attack_z: 敵人發射子彈的z位置
int hp1 = 100, hp2 = 100, hp3 = 100, my_hp=100;
bool is_hit = false, fire=false, swing=false, recover=false, jump=false, is_down=false; 
//is_hit: 是否射中，fire: 是否發射，swing: 右手臂是否旋轉，recover: 是否要redraw logo
//jump: 是否正在跳，is_down: logo正在往下移動
bool hit_m1 = false, hit_m2 = false, hit_m3 = false, curr_logo = true, curr_m1 = true, curr_m2 = true, curr_m3 = true;
//hit_mx: model 1, 2, 3 是否被射中
//curr_x: 表示目前該model是消失or正在場上 (預設是都在場)
bool fog = false, snipe=false, hit_me=false, enemy_fire=false, anti_aliasing=false, polygon_offset=false;
//fog: 目前有霧, snipe: 畫瞄準鏡, hit_me: 敵人是否打到我, enemy_fire: 敵人正在fire

Model model1, model2, model3;

GLfloat no_mat[] = { 0.0, 0.0, 0.0, 1.0 };
GLfloat mat_ambient[] = { 1.0, 1.0, 1.0, 1.0 };
GLfloat mat_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };
GLfloat no_shininess[] = { 0.0 };
GLfloat low_shininess[] = { 30.0 };
GLfloat high_shininess[] = { 100.0 };
GLfloat mat_emission[] = { 0.3,0.8, 0.0, 1.0 };

GLuint indices[50] = {};	//for glDrawElements的functions

void fill_in_indices(int start_index, int number) { //將連續的index填入indices array (for glDrawElements)
	for (int i = 0; i < number; i++) {
		indices[i] = start_index;
		start_index++;
	}
} 

void fill_in_multi_indices(GLuint* temp_indices, int start_index, int number) { //將連續的index填入indices array (for glMultiDrawElements)

	for (int i = 0; i < number; i++) {
		temp_indices[i] = start_index;
		start_index++;
	}
}

void setupInterleave_國(void){
	static GLfloat vertices_國[] = { 
		-2.6f, 0.15f,
		-2.58f, 0.09f,
		-2.4f, 0.115f,
		-2.3f, 0.125f,
		-2.2f, 0.12f,
		-2.155f, 0.126f,
		-2.15f, 0.15f,
		-2.155f, 0.18f,
		-2.2f, 0.19f,
		-2.285f, 0.193f, //
		-2.193f, 0.32f,
		-2.163f, 0.4f,
		-2.165f, 0.415f,
		-2.18f, 0.43f,
		-2.2f, 0.465f,
		-2.23f, 0.44f,
		-2.227, 0.41f,
		-2.25f, 0.33f,//
		-2.25f, 0.33f,
		-2.26f, 0.3f,
		-2.218f, 0.265f,
		-2.193f, 0.32f,//
		-2.26f, 0.3f,
		-2.28f, 0.265f,
		-2.24f, 0.23f,
		-2.218f, 0.265f,//
		-2.28f, 0.265f,
		-2.33f, 0.22f,
		-2.285f, 0.193f,
		-2.24f, 0.23f,//
		-2.285f, 0.193f,
		-2.33f, 0.22f,
		-2.4f, 0.18f,
		-2.53f, 0.165f,
		-2.4f, 0.115f,//
		-2.54f, 0.1f,
		-2.53f, 0.165f,
		-2.545f, 0.22f,
		-2.545f, 0.34f,
		-2.59f, 0.42f,
		-2.6f, 0.3f,
		-2.6f, 0.15f,//
		-2.536f, 0.365f,
		-2.52f, 0.37f,
		-2.5f, 0.375f,
		-2.59f, 0.48f,
		-2.59f, 0.42f,
		-2.545f, 0.34f,//
		-2.59f, 0.48f,
		-2.47f, 0.46f,
		-2.44f, 0.425f,
		-2.48f, 0.4f,
		-2.5f, 0.375f,//
		-2.47f, 0.46f,
		-2.44f, 0.425f,
		-2.415f, 0.43f,//
		-2.415f, 0.43f, 
		-2.46f, 0.38f,
		-2.52f, 0.32f,
		-2.53f, 0.3f,
		-2.52f, 0.28f,
		-2.46f, 0.31f,
		-2.38f, 0.43f,//
		-2.48f, 0.285f,
		-2.515f, 0.26f,
		-2.515f, 0.22f,
		-2.495f, 0.205f,
		-2.4f, 0.248f,//
		-2.48f, 0.285f,
		-2.4f, 0.248f,
		-2.32f, 0.28f,
		-2.46f, 0.31f,//
		-2.28f, 0.295f,
		-2.27f, 0.31f,
		-2.265f, 0.325f,
		-2.265f, 0.34f,
		-2.28f, 0.355f,
		-2.34f, 0.33f,
		-2.32f, 0.28f,//
		-2.32f, 0.28f,
		-2.34f, 0.33f,
		-2.415f, 0.38f,
		-2.46f, 0.31f, //	
		-2.34f, 0.33f,
		-2.35f, 0.335f,
		-2.4f, 0.248f,//
		-2.35f, 0.335f,
		-2.287f, 0.41f,
		-2.305f, 0.46f,
		-2.34f, 0.42f,//
		-2.35f, 0.335f,
		-2.34f, 0.42f,
		-2.415f, 0.38f,//
		-2.47f, 0.46f,
		-2.44f, 0.425f,
		-2.415f, 0.43f,
		-2.38f, 0.43f,
		-2.32f, 0.47f,
		-2.33f, 0.51f, //
		-2.33f, 0.51f,
		-2.305f, 0.46f,
		-2.32f, 0.47f, //
		-2.275f, 0.53f,
		-2.26f, 0.49f,
		-2.24f, 0.495f,
		-2.245f, 0.54f, //
		-2.245f, 0.54f,
		-2.24f, 0.495f,
		-2.18f, 0.5f, //
		-2.18f, 0.5f,
		-2.165f, 0.505f,
		-2.165f, 0.53f,
		-2.245f, 0.54f, //
		-2.265f, 0.56f,
		-2.245f, 0.54f,
		-2.165f, 0.53f,
		-2.173f, 0.55f, //
		-2.173f, 0.55f,
		-2.21f, 0.6f,
		-2.263f, 0.583f,
		-2.265f, 0.56f, //
		-2.34f, 0.56f,
		-2.33f, 0.51f,
		-2.32f, 0.47f,
		-2.287f, 0.41f,
		-2.25f, 0.34f,
		-2.227f, 0.41f,
		-2.26f, 0.49f,
		-2.275f, 0.53f,
		-2.283f, 0.58f, //
		-2.25f, 0.34f,
		-2.25f, 0.33f,
		-2.227f, 0.41f, //
		-2.218f, 0.265f,
		-2.205f, 0.242f,
		-2.193f, 0.32f,//
		-2.17f, 0.195f,
		-2.155f, 0.195f,
		-2.193f, 0.32f,
		-2.205f, 0.242f,//
		-2.15f, 0.22f,
		-2.14f, 0.23f,
		-2.137f, 0.249f,
		-2.193f, 0.32f,//
		-2.193f, 0.32f,
		-2.155f, 0.195f,
		-2.15f, 0.22f,//
		-2.54f, 0.566f,
		-2.57f, 0.565f,
		-2.587f, 0.54f,
		-2.59f, 0.48f,
		-2.505f, 0.503f,//
		-2.59f, 0.48f,
		-2.47f, 0.46f,
		-2.505f, 0.503f,//
		-2.505f, 0.503f,
		-2.34f, 0.56f,
		-2.5f, 0.595f,
		-2.52f, 0.58f,
		-2.54f, 0.566f,//
		-2.5f, 0.595f,
		-2.34f, 0.56f,
		-2.283f, 0.58f,
		-2.22f, 0.658f, //
		-2.22f, 0.658f,
		-2.283f, 0.58f,
		-2.263f, 0.583f,
		-2.21f, 0.6f,//
		-2.21f, 0.6f,
		-2.13f, 0.61f,
		-2.12f, 0.66f,
		-2.22f, 0.658f,//
		-2.09f, 0.61f,
		-2.1f, 0.645f,
		-2.12f, 0.66f,
		-2.13f, 0.61f,//
		-2.13f, 0.61f,
		-2.123f, 0.109f,
		-2.075f, 0.4f,
		-2.09f, 0.61f,//
		-2.075f, 0.4f,
		-2.068f, 0.095f,
		-2.072f, 0.07f,
		-2.123f, 0.109f,//
		-2.123f, 0.109f,
		-2.16f, 0.11f,
		-2.128f, 0.015f,
		-2.11f, 0.015f,
		-2.072f, 0.07f
	};

	glInterleavedArrays(GL_V2F, 0, vertices_國);
}

void setupInterleave_立(void) {
	static GLfloat vertices_立[] = {
		-1.687f, 0.617f,
		-1.685f, 0.585f,
		-1.64f, 0.603f,//
		-1.685f, 0.585f,
		-1.69f, 0.57f,
		-1.686f, 0.56f,
		-1.673f, 0.540f,
		- 1.635f, 0.505f,
		- 1.640f, 0.603f,//
		-1.635f, 0.505f,
		-1.543f, 0.525f,
		-1.542f, 0.542f,
		-1.56f, 0.56f,
		-1.6f, 0.585f,
		-1.64f, 0.603f,//
		-1.635f, 0.505f,
		-1.775f, 0.465f,
		-1.780f, 0.390f,
		-1.760f, 0.392f,
		-1.618f, 0.438f,//
		-1.775f, 0.465f,
		-1.767f, 0.48f,
		-1.79f, 0.466f, //
		-1.79f, 0.466f,
		-1.825f, 0.46f,
		-1.841f, 0.44f,
		-1.846f, 0.41f,
		-1.84f, 0.39f,
		-1.82f, 0.375f,
		-1.81f, 0.372f,
		-1.8f, 0.38f,//
		-1.8f, 0.38f,
		-1.78f, 0.39f,
		-1.775f, 0.465f,
		-1.79f, 0.466f,//
		-1.635f, 0.505f,
		-1.618f, 0.438f,
		-1.52f, 0.453f,
		-1.49f, 0.527f,
		-1.543f, 0.525f,//
		-1.47f, 0.453f,
		-1.45f, 0.472f,
		-1.454f, 0.51f,
		-1.48f, 0.523f,//
		-1.49f, 0.527f,
		-1.52f, 0.453f,
		-1.47f, 0.453f,
		-1.48f, 0.523f,//
		-1.58f, 0.425f,
		-1.52f, 0.453f,
		-1.618f, 0.438f,//
		-1.618f, 0.438f,
		-1.745f, 0.34f,
		-1.63f, 0.378f,
		-1.58f, 0.425f,//
		-1.745f, 0.34f,
		-1.753f, 0.32f,
		-1.753f, 0.276f,
		-1.739f, 0.262f,
		-1.729f, 0.262f,
		-1.54f, 0.376f,
		-1.63f, 0.378f,//
		-1.51f, 0.384f,
		-1.5f, 0.415f,
		-1.53f, 0.41f,
		-1.63f, 0.378f,
		-1.54f, 0.376f,//
		-1.51f, 0.384f,
		-1.5f, 0.376f,
		-1.445f, 0.374f,
		-1.445f, 0.395f,
		-1.46f, 0.41f,
		-1.48f, 0.417f,
		-1.5f, 0.415f,//
		-1.5f, 0.376f,
		-1.56f, 0.29f,
		-1.54f, 0.253f,
		-1.46f, 0.35f,
		-1.445f, 0.374f,//
		-1.62f, 0.228f,
		-1.592f, 0.205f,
		-1.54f, 0.253f,
		-1.56f, 0.29f,//
		-1.592f, 0.205f,
		-1.62f, 0.228f,
		-1.677f, 0.186f,
		-1.595f, 0.194f,//
		-1.595f, 0.194f,
		-1.677f, 0.186f,
		-1.846f, 0.171f,
		-1.83f, 0.14f,
		-1.8f, 0.112f,
		-1.78f, 0.105f,
		-1.765f, 0.105f,
		-1.63f, 0.127f,//
		-1.63f, 0.127f,
		-1.53f, 0.142f,
		-1.5f, 0.15f,
		-1.44f, 0.203f,
		-1.595f, 0.194f,//
		-1.5f, 0.15f,
		-1.43f, 0.153f,
		-1.38f, 0.195f,
		-1.44f, 0.203f,//
		-1.43f, 0.153f,
		-1.36f, 0.145f,
		-1.348f, 0.146f,
		-1.348f, 0.168f,
		-1.359f, 0.189f,
		-1.38f, 0.195f,
		-1.44f, 0.203f
	};

	glInterleavedArrays(GL_V2F, 0, vertices_立);
}

void setupInterleave_中(void) {
	static GLfloat vertices_中[] = {
		-1.18f, 0.525f,
		-1.2f, 0.52f,
		-1.185f, 0.5f,
		-1.17f, 0.5f,//
		-1.21f, 0.528f,
		-1.226f, 0.528f,
		-1.24f, 0.51f,
		-1.19f, 0.49f,
		-1.185f, 0.5f,
		-1.2f, 0.52f,//
		-1.24f, 0.51f,
		-1.243f, 0.46f,
		-1.238f, 0.42f,
		-1.227f, 0.38f,
		-1.215f, 0.35f,
		-1.2f, 0.32f,
		-1.18f, 0.3f,
		-1.169f, 0.405f,
		-1.177f, 0.475f,
		-1.19f, 0.49f,//
		-1.227f, 0.38f,
		-1.166f, 0.34f,
		-1.16f, 0.347f,
		-1.16f, 0.36f,
		-1.169f, 0.405f, //
		-1.238f, 0.42f,
		-1.2f, 0.32f,
		-1.18f, 0.3f,
		-1.13f, 0.3f,
		-1.15f, 0.315f,
		-1.166f, 0.34f,//
		-1.18f, 0.525f,
		-1.17f, 0.5f,
		-1.12f, 0.47f,
		-1.1f, 0.47f,
		-0.947f, 0.535f,
		-0.954f, 0.573f,
		-1.16f, 0.537f,//
		-0.94f, 0.535f,
		-0.954f, 0.573f,
		-0.947f, 0.535f,//
		-0.94f, 0.535f,
		-0.9f, 0.58f,
		-0.895f, 0.648f,
		-0.92f, 0.655f,
		-0.952f, 0.64f,
		-0.954f, 0.573f,//
		-0.9f, 0.58f,
		-0.94f, 0.535f,
		-0.953f, 0.425f,
		-0.902f, 0.48f,
		-0.894f, 0.536f,//
		-0.96f, 0.335f,
		-0.957f, -0.145f,
		-0.92f, -0.12f,
		-0.908f, 0.015f,
		-0.902f, 0.02f,
		-0.902f, 0.48f,
		-0.953f, 0.425f,//
		-0.894f, 0.536f,
		-0.82f, 0.54f,
		-0.78f, 0.58f,
		-0.9f, 0.58f,//
		-0.78f, 0.58f,
		-0.82f, 0.54f,
		-0.738f, 0.53f,
		-0.74f, 0.56f,//
		-0.902f, 0.48f,
		-0.902f, 0.415f,
		-0.738f, 0.53f,
		-0.82f, 0.54f,//
		-0.953f, 0.425f,
		-1.05f, 0.375f,
		-1.068f, 0.32f,
		-1.05, 0.31f,
		-0.96f, 0.335f,//
		-0.835f, 0.38f,
		-0.82f, 0.385f,
		-0.82f, 0.395f,
		-0.88f, 0.405f,
		-0.902f, 0.4f,//
		-0.902f, 0.34f,
		-0.85f, 0.35f,
		-0.827f, 0.365f,
		-0.835f, 0.38f,
		-0.902f, 0.4f,
	};

	glInterleavedArrays(GL_V2F, 0, vertices_中);
}

void setupInterleave_興(void) {
	static GLfloat vertices_興[] = {
		-0.62f, 0.215f,
		-0.68f, 0.265f,
		-0.71f, 0.27f,
		-0.718f, 0.26f,
		-0.714f, 0.24f,//
		-0.714f, 0.24f,
		-0.72f, 0.22f,
		-0.72f, 0.2f,
		-0.695f, 0.178f,
		-0.68f, 0.178f,
		-0.62f, 0.215f,//
		-0.62f, 0.215f,
		-0.42f, 0.29f,
		-0.455f, 0.32f,
		-0.5f, 0.308f,
		-0.68f, 0.265f,//
		-0.455f, 0.32f,
		-0.455f, 0.56f,
		-0.465f, 0.58f,
		-0.48f, 0.598f,
		-0.5f, 0.54f,
		-0.5f, 0.308f,//
		-0.48f, 0.598f,
		-0.52f, 0.58f,
		-0.52f, 0.565f,
		-0.5f, 0.54f, //
		-0.42f, 0.29f,
		-0.408f, 0.293f,
		-0.43f, 0.322f,
		-0.455f, 0.32f,//
		-0.413f, 0.273f,
		-0.408f, 0.293f,
		-0.42f, 0.29f,//
		-0.43f, 0.322f,
		-0.408f, 0.293f,
		-0.389f, 0.332f,
		-0.387f, 0.54f,
		-0.423f, 0.51f,
		-0.43f, 0.5f,//
		-0.39f, 0.58f,
		-0.41f, 0.6f,
		-0.425f, 0.55f,
		-0.423f, 0.51f,
		-0.387f, 0.54f,//
		-0.425f, 0.55f,
		-0.41f, 0.6f,
		-0.44f, 0.612f,
		-0.445f, 0.59f,//	
		-0.46f, 0.6f,
		-0.455f, 0.585f,
		-0.445f, 0.59f,
		-0.44f, 0.612f,//
		-0.389f, 0.332f,
		-0.408f, 0.293f,
		-0.36f, 0.31f,
		-0.325f, 0.35f,
		-0.36f, 0.34f,//
		-0.36f, 0.31f,
		-0.345f, 0.29f,
		-0.33f, 0.31f,
		-0.325f, 0.35f,//
		-0.36f, 0.34f,
		-0.325f, 0.35f,
		-0.318f, 0.363f,
		-0.32f, 0.455f,
		-0.32f, 0.6f,
		-0.36f, 0.47f,//
		-0.354f, 0.56f,
		-0.36f, 0.533f,
		-0.37f, 0.5f,
		-0.36f, 0.47f,
		-0.32f, 0.483f,//
		-0.354f, 0.56f,
		-0.36f, 0.533f,
		-0.32f, 0.483f,
		-0.32f, 0.55f,
		-0.32f, 0.6f,//
		-0.32f, 0.6f,
		-0.34f, 0.615f,
		-0.36f, 0.59f,
		-0.354f, 0.56f,//
		-0.34f, 0.615f,
		-0.37f, 0.61f,
		-0.378f, 0.6f,
		-0.37f, 0.59f,
		-0.36f, 0.59f,//
		-0.34f, 0.615f,
		-0.32f, 0.6f,
		-0.27f, 0.61f,
		-0.205f, 0.62f,
		-0.195f, 0.64f,
		-0.24f, 0.668f,//
		-0.275f, 0.56f,
		-0.21f, 0.585f,
		-0.19f, 0.615f,
		-0.205f, 0.62f,
		-0.27f, 0.61f,//
		-0.21f, 0.585f,
		-0.275f, 0.56f,
		-0.278f, 0.48f,
		-0.23f, 0.51f,
		-0.22f, 0.54f,//
		-0.32f, 0.483f,
		-0.305f, 0.483f,
		-0.278f, 0.48f,
		-0.275f, 0.56f,
		-0.32f, 0.55f,//
		-0.27f, 0.46f,
		-0.24f, 0.46f,
		-0.23f, 0.51f,
		-0.278f, 0.48f,//
		-0.278f, 0.48f,
		-0.305f, 0.483f,
		-0.32f, 0.455f,
		-0.295f, 0.445f,//
		-0.295f, 0.445f,
		-0.32f, 0.455f,
		-0.36f, 0.47f,
		-0.36f, 0.34f,
		-0.325f, 0.335f,
		-0.318f, 0.363f,
		-0.3f, 0.38f,
		-0.28f, 0.415f,
		-0.286f, 0.435f,//
		-0.24f, 0.46f,
		-0.27f, 0.46f,
		-0.286f, 0.435f,
		-0.28f, 0.415f,
		-0.28f, 0.36f,
		-0.24f, 0.37f,//
		-0.28f, 0.36f,
		-0.3f, 0.38f,
		-0.318f, 0.363f,
		-0.315f, 0.35f,
		-0.31f, 0.32f,
		-0.3f, 0.31f,
		-0.26f, 0.305f,
		-0.24f, 0.305f,
		-0.235f, 0.33f,//
		-0.3f, 0.29f,
		-0.28f, 0.28f,
		-0.26f, 0.305f,
		-0.3f, 0.31f,//
		-0.325f, 0.35f,
		-0.33f, 0.31f,
		-0.31f, 0.32f,
		-0.315f, 0.35f,//
		-0.24f, 0.37f,
		-0.28f, 0.36f,
		-0.24f, 0.305f,
		-0.235f, 0.33f,
		-0.195f, 0.333f,
		-0.2f, 0.37f,	//
		-0.2f, 0.37f,
		-0.195f, 0.333f,
		-0.136f, 0.343f,
		-0.145f, 0.385f,
		-0.146f, 0.42f,
		-0.178f, 0.44f,
		-0.18f, 0.39f,
		-0.205f, 0.4f,//
		-0.195f, 0.32f,
		-0.18f, 0.31f,
		-0.136f, 0.343f,
		-0.195f, 0.333f,//
		-0.146f, 0.42f,
		-0.178f, 0.44f,
		-0.208f, 0.445f,
		-0.2f, 0.47f,
		-0.17f, 0.5f,
		-0.14f, 0.5f,
		-0.12f, 0.46f,
		-0.126f, 0.445f,//
		-0.208f, 0.445f,
		-0.2f, 0.47f,
		-0.24f, 0.46f,
		-0.24f, 0.445f,//
		-0.208f, 0.445f,
		-0.225f, 0.445f,
		-0.205f, 0.4f,
		-0.18f, 0.39f, //
		-0.2f, 0.47f,
		-0.17f, 0.5f,
		-0.22f, 0.54f,
		-0.23f, 0.51f,//
		-0.14f, 0.5f,
		-0.17f, 0.5f,
		-0.155f, 0.58f,
		-0.11f, 0.58f,//
		-0.11f, 0.58f,
		-0.108f, 0.65f,
		-0.12f, 0.658f,
		-0.19f, 0.615f,
		-0.21f, 0.585f,
		-0.155f, 0.58f,
		-0.11f, 0.58f,//
		-0.108f, 0.65f,
		-0.155f, 0.58f,
		-0.11f, 0.58f,
		-0.083f, 0.625f,
		-0.078f, 0.65f,
		-0.09f, 0.66f,//
		-0.126f, 0.445f,
		-0.146f, 0.42f,
		-0.128f, 0.43f, //
		-0.145f, 0.385f,
		-0.136f, 0.343f,
		0.0f, 0.343f,
		-0.05f, 0.39f,//
		-0.05f, 0.39f,
		0.0f, 0.343f,
		0.018f, 0.35f,
		0.02f, 0.39f,
		-0.01f, 0.4f,//
		-0.518f, 0.173f,
		-0.59f, 0.2f,
		-0.568f, 0.14f,
		-0.54f, 0.1f,
		-0.514f, 0.088f,//
		-0.514f, 0.088f,
		-0.41f, 0.14f,
		-0.41f, 0.15f,
		-0.41f, 0.193f,
		-0.42f, 0.2f,
		-0.518f, 0.173f,//
		-0.38f, 0.19f,
		-0.37f, 0.198f,
		-0.37f, 0.21f,
		-0.41f, 0.193f, //
		-0.41f, 0.193f,
		-0.39f, 0.17f,
		-0.375f, 0.18f,
		-0.38f, 0.19f,//
		-0.4f, 0.15f,
		-0.38f, 0.16f,
		-0.39f, 0.17f,
		-0.41f, 0.15f,//
		-0.41f, 0.193f,
		-0.42f, 0.2f,
		-0.41f, 0.15f,
		-0.39f, 0.17f,//
		-0.355f, 0.208f,
		-0.355f, 0.192f,
		-0.24f, 0.243f,//
		-0.15f, 0.26f,
		-0.14f, 0.22f,
		-0.008f, 0.085f,
		0.005f, 0.11f,
		0.008f, 0.15f,
		0.0f, 0.165f,//
		-0.01f, 0.06f,
		-0.008f, 0.085f,
		-0.14f, 0.22f
	};

	glInterleavedArrays(GL_V2F, 0, vertices_興);
}

void setupInterleave_大(void) {
	static GLfloat vertices_大[] = {
		0.47f, 0.61f,
		0.46f, 0.55f,
		0.48f, 0.54f,
		0.505f, 0.6f,
		0.512f, 0.615f,
		0.51f, 0.645f,
		0.498f, 0.65f,
		0.485f, 0.645f,//
		0.505f, 0.6f,
		0.48f, 0.54f,
		0.48f, 0.483f,
		0.5f, 0.495f,//
		0.48f, 0.54f,
		0.46f, 0.55f,
		0.44f, 0.475f,
		0.468f, 0.483f,//
		0.575f, 0.466f,
		0.575f, 0.48f,
		0.588f, 0.49f,
		0.58f, 0.5f,
		0.5f, 0.495f,//
		0.565f, 0.45f,
		0.58f, 0.457f,
		0.575f, 0.466f,
		0.5f, 0.495f,//
		0.5f, 0.432f,
		0.55f, 0.435f,
		0.57f, 0.44f,
		0.565f, 0.45f,
		0.5f, 0.495f, //
		0.5f, 0.432f,
		0.455f, 0.42f,
		0.44f, 0.475f,
		0.468f, 0.483f,
		0.48f, 0.483f,
		0.5f, 0.495f,//
		0.41f, 0.405f,
		0.412f, 0.38f,
		0.45f, 0.36f,
		0.455f, 0.42f,
		0.44f, 0.475f,//
		0.28f, 0.414f,
		0.32f, 0.37f,
		0.41f, 0.405f,
		0.44f, 0.475f,//
		0.28f, 0.414f,
		0.26f, 0.418f,
		0.185f, 0.39f,
		0.183f, 0.36f,
		0.191f, 0.36f,//
		0.191f, 0.36f,
		0.215f, 0.315f,
		0.255f, 0.315f,
		0.275f, 0.325f,
		0.32f, 0.37f,
		0.28f, 0.414f, //
		0.412f, 0.38f,
		0.385f, 0.335f,
		0.385f, 0.32f,
		0.42f, 0.28f,
		0.438f, 0.32f,
		0.45f, 0.36f,//
		0.36f, 0.29f,
		0.36f, 0.195f,
		0.4f, 0.24f,
		0.42f, 0.28f,
		0.385f, 0.32f,//
		0.36f, 0.195f,
		0.335f, 0.19f,
		0.29f, 0.187f,
		0.32f, 0.25f,
		0.36f, 0.29f,//
		0.29f, 0.187f,
		0.32f, 0.25f,
		0.28f, 0.225f,
		0.275f, 0.213f,
		0.27f, 0.195f,//
		0.27f, 0.195f,
		0.275f, 0.213f,
		0.26f, 0.21f,
		0.24f, 0.19f,
		0.25f, 0.183f, //
		0.59f, 0.23f,
		0.672f, 0.2f,
		0.68f, 0.22f,
		0.66f, 0.25f,
		0.48f, 0.32f,//
		0.615f, 0.178f,
		0.64f, 0.15f,
		0.67f, 0.18f,
		0.672f, 0.2f,
		0.59f, 0.23f,//
		0.59f, 0.23f,
		0.57f, 0.189f,
		0.605f, 0.17f,
		0.615f, 0.178f,//
		0.51f, 0.185f,
		0.525f, 0.18f,
		0.54f, 0.18f,
		0.57f, 0.189f,
		0.59f, 0.23f
	};

	glInterleavedArrays(GL_V2F, 0, vertices_大);
}

void setupInterleave_學(void) {
	static GLfloat vertices_學[] = {
		0.887f, 0.613f,
		0.92f, 0.594f,
		0.96f, 0.637f,
		0.96f, 0.65f,
		0.935f, 0.683f,//
		0.865f, 0.49f,
		0.86f, 0.5f,
		0.855f, 0.52f,
		0.847f, 0.55f,
		0.853f, 0.61f,
		0.86f, 0.64f,
		0.887f, 0.613f,
		0.92f, 0.594f,//
		0.865f, 0.49f,
		0.945f, 0.56f,
		0.953f, 0.58f,
		0.95f, 0.59f,
		0.92f, 0.594f,//
		0.945f, 0.56f,
		0.865f, 0.49f,
		0.92f, 0.485f,
		0.92f, 0.51f,
		0.93f, 0.523f,
		0.953f, 0.535f,
		0.954f, 0.55f,//
		0.865f, 0.36f,
		0.888f, 0.3f,
		0.908f, 0.37f,
		0.908f, 0.415f,
		0.96f, 0.455f,
		0.972f, 0.48f,
		0.92f, 0.485f,
		0.865f, 0.49f,//
		0.825f, 0.33f,
		0.86f, 0.3f,
		0.888f, 0.3f,
		0.865f, 0.36f, //
		0.825f, 0.33f,
		0.84f, 0.28f,
		0.86f, 0.3f,//
		0.815f, 0.24f,
		0.84f, 0.28f,
		0.825f, 0.33f,//
		0.82f, 0.35f,
		0.77f, 0.28f,
		0.815f, 0.24f,
		0.825f, 0.33f,//
		0.77f, 0.28f,
		0.755f, 0.26f,
		0.745f, 0.24f,
		0.745f, 0.2f,
		0.768f, 0.18f,
		0.785f, 0.18f,
		0.8f, 0.2f,
		0.815f, 0.24f,//
		0.905f, 0.37f,
		0.888f, 0.3f,
		0.91f, 0.328f,//
		0.91f, 0.328f,
		0.925f, 0.328f,
		0.905f, 0.37f, //	
		0.905f, 0.37f,
		0.925f, 0.328f,
		1.21f, 0.416f,
		1.105f, 0.425f,
		1.055f, 0.42f,
		0.98f, 0.4f,//
		1.25f, 0.453f,
		1.16f, 0.44f,
		1.105f, 0.425f,
		1.21f, 0.416f,//
		1.21f, 0.416f,
		1.225f, 0.412f,
		1.28f, 0.45f,
		1.25f, 0.453f,//
		1.235f, 0.4f,
		1.305f, 0.372f,
		1.32f, 0.395f,
		1.32f, 0.415f,
		1.31f, 0.431f,
		1.28f, 0.45f,
		1.225f, 0.412f,//
		1.235f, 0.4f,
		1.233f, 0.37f,
		1.243f, 0.363f,
		1.305f, 0.372f,//
		1.16f, 0.33f,
		1.225f, 0.358f,
		1.233f, 0.37f,
		1.235f, 0.4f, //
		0.92f, 0.485f,
		0.96f, 0.455f,
		0.972f, 0.48f,
		0.98f, 0.525f,//
		1.0f, 0.44f,
		0.998f, 0.495f,
		0.998f, 0.51f,
		0.99f, 0.53f,
		0.98f, 0.525f,
		0.972f, 0.48f,//
		1.0f, 0.44f,
		1.055f, 0.42f,
		1.065f, 0.445f,
		1.065f, 0.457f,
		1.05f, 0.47f,
		1.02f, 0.488f,
		0.998f, 0.495f,//
		1.0f, 0.44f,
		0.985f, 0.425f,
		0.98f, 0.4f,
		1.055f, 0.42f,//
		0.99f, 0.543f,
		0.99f, 0.53f,
		0.998f, 0.51f,
		1.03f, 0.54f,
		1.065f, 0.595f,
		1.01f, 0.59f,//
		1.01f, 0.59f,
		0.965f, 0.585f,
		0.965f, 0.565f,
		0.99f, 0.543f,//
		1.03f, 0.54f,
		1.07f, 0.555f,
		1.093f, 0.57f,
		1.098f, 0.594f,
		1.065f, 0.595f,//
		1.03f, 0.54f,
		1.04f, 0.52f,
		1.06f, 0.54f,
		1.07f, 0.555f,//
		1.02f, 0.488f,
		1.05f, 0.47f,
		1.07f, 0.52f,
		1.06f, 0.54f,
		1.04f, 0.52f,//
		1.065f, 0.595f,
		1.065f, 0.607f,
		1.085f, 0.63f,
		1.085f, 0.642f,
		1.074f, 0.66f,
		1.055f, 0.675f,
		1.01f, 0.59f,//
		1.088f, 0.615f,
		1.108f, 0.594f,
		1.155f, 0.594f,
		1.12f, 0.62f,//
		1.155f, 0.594f,
		1.2f, 0.6f,
		1.218f, 0.62f,
		1.218f, 0.655f,
		1.2f, 0.665f,
		1.18f, 0.66f,
		1.15f, 0.638f,
		1.12f, 0.62f,//
		1.16f, 0.58f,
		1.2f, 0.6f,
		1.155f, 0.594f,//
		1.073f, 0.54f,
		1.093f, 0.52f,
		1.1f, 0.56f,
		1.093f, 0.57f,
		1.07f, 0.555f,//
		1.1f, 0.56f,
		1.093f, 0.52f,
		1.093f, 0.51f,
		1.115f, 0.453f,
		1.17f, 0.46f,
		1.177f, 0.48f,
		1.175f, 0.51f,
		1.16f, 0.58f,//
		1.16f, 0.58f,
		1.175f, 0.51f,
		1.2f, 0.6f,//
		1.08f, 0.48f,
		1.073f, 0.47f,
		1.085f, 0.453f,
		1.115f, 0.453f,//
		1.115f, 0.453f,
		1.093f, 0.51f,
		1.08f, 0.505f,
		1.08f, 0.48f,//
		1.16f, 0.44f,
		1.17f, 0.46f,
		1.115f, 0.453f,//
		1.115f, 0.453f,
		1.105f, 0.425f,
		1.16f, 0.44f,//
		1.02f, 0.318f,
		0.995f, 0.31f,
		1.02f, 0.29f,
		1.04f, 0.283f,
		1.063f, 0.283f,//
		1.063f, 0.283f,
		1.093f, 0.283f,
		1.11f, 0.305f,
		1.06f, 0.342f,
		1.02f, 0.318f,//
		1.11f, 0.305f,
		1.12f, 0.33f,
		1.108f, 0.37f,
		1.093f, 0.37f,
		1.08f, 0.36f,
		1.06f, 0.342f,//
		1.043f, 0.255f,
		1.043f, 0.24f,
		1.06f, 0.215f,
		1.08f, 0.21f,
		1.13f, 0.22f,
		1.145f, 0.227f,
		1.12f, 0.258f,
		1.11f, 0.27f,
		1.093f, 0.287f, 
		1.063f, 0.287f,//
		0.945f, 0.21f,
		0.94f, 0.185f,
		1.06f, 0.215f,
		1.043f, 0.24f,//
		0.945f, 0.21f,
		0.935f, 0.218f,
		0.925f, 0.21f,
		0.925f, 0.19f,
		0.94f, 0.185f,//
		1.12f, 0.258f,
		1.2f, 0.263f,
		1.145f, 0.227f,
		1.13f, 0.22f,//
		1.2f, 0.263f,
		1.145f, 0.227f,
		1.17f, 0.23f,//
		1.17f, 0.23f,
		1.225f, 0.22f,
		1.24f, 0.23f,
		1.23f, 0.253f,
		1.2f, 0.263f,//
		1.08f, 0.21f,
		1.088f, 0.16f,
		1.12f, 0.02f,
		1.13f, 0.22f,  //
		1.11f, -0.01f,
		1.07f, -0.04f,
		1.06f, 0.05f,
		1.08f, 0.1f,//
		1.03f, -0.066f,
		1.07f, -0.04f,
		1.06f, 0.05f,
		1.03f, 0.01f,//
		1.03f, 0.01f,
		1.0f, -0.02f,
		0.98f, -0.093f,
		1.03f, -0.066f,//
		0.9f, -0.12f,
		0.94f, -0.11f,
		0.98f, -0.093f,
		1.0f, -0.02f,
		0.9f, -0.08f,//
		0.9f, -0.12f,
		0.87f, -0.124f,
		0.84f, -0.12f,
		0.82f, -0.118f,
		0.78f, -0.105f,
		0.82f, -0.095f,
		0.86f, -0.09f,
		0.9f, -0.08f,//
		0.78f, -0.09f,
		0.78f, -0.105f,
		0.82f, -0.095f,//
		0.73f, -0.07f,
		0.78f, -0.105f,
		0.78f, -0.09f,//
		1.11f, -0.01f,
		1.12f, 0.02f,
		1.088f, 0.16f,
		1.08f, 0.1f
	};

	glInterleavedArrays(GL_V2F, 0, vertices_學);
}

void setupInterleave_logo(void) {
	static GLfloat vertices_logo[] = {
		1.705f, -0.03f,
		1.8f, 0.02f,
		1.755f, 0.1f, //
		1.785f, 0.2f,
		1.755f, 0.1f, 
		1.8f, 0.02f, 
		1.9f, 0.05f,//
		1.9f, 0.05f,
		2.0f, 0.07f,
		1.81f, 0.32f,
		1.785f, 0.2f,//
		1.82f, 0.42f,
		1.81f, 0.32f,
		2.0f, 0.07f,
		2.06f, 0.08f,//
		2.06f, 0.08f,
		2.12f, 0.082f,
		1.82f, 0.5f,
		1.82f, 0.42f,//
		1.81f, 0.6f,
		1.82f, 0.5f,
		2.12f, 0.082f,
		2.18f, 0.08f,//
		2.18f, 0.08f,
		2.24f, 0.07f,
		1.79f, 0.675f,
		1.81f, 0.6f,//
		2.24f, 0.07f,
		2.308f, 0.19f,
		2.27f, 0.264f,
		2.24f, 0.315f,
		2.22f, 0.35f,
		2.18f, 0.4f,
		2.15f, 0.438f,
		2.11f, 0.48f,
		2.08f, 0.508f,
		2.047f, 0.535f,
		2.0f, 0.568f,
		1.94f, 0.605f,
		1.86f, 0.648f,
		1.79f, 0.675f,//
		2.308f, 0.19f,
		2.24f, 0.07f,
		2.36f, 0.045f,
		2.345f, 0.1f,//
		1.76f, 0.77f,
		1.773f, 0.725f,
		1.86f, 0.695f,
		1.88f, 0.738f,//
		1.88f, 0.738f,
		1.86f, 0.695f,
		1.94f, 0.66f,
		2.0f, 0.72f,//
		2.0f, 0.72f,
		1.94f, 0.66f,
		2.02f, 0.61f,
		2.1f, 0.712f,//
		2.1f, 0.712f,
		2.02f, 0.61f,
		2.08f, 0.557f,
		2.18f, 0.712f,//
		2.18f, 0.712f,
		2.08f, 0.557f,
		2.142f, 0.5f,
		2.28f, 0.72f,//
		2.28f, 0.72f,
		2.142f, 0.5f,
		2.197f, 0.44f,
		2.4f, 0.733f,//
		2.4f, 0.733f,
		2.197f, 0.44f,
		2.24f, 0.38f,
		2.53f, 0.76f,//
		2.503f, 0.7f,
		2.197f, 0.44f,
		2.24f, 0.38f,
		2.473f, 0.6f,//
		2.473f, 0.6f,
		2.197f, 0.44f,
		2.24f, 0.38f,
		2.46f, 0.54f,//
		2.46f, 0.54f,
		2.197f, 0.44f,
		2.24f, 0.38f,
		2.46f, 0.4f,//
		2.47f, 0.3f,
		2.46f, 0.4f,
		2.24f, 0.38f,
		2.295f, 0.295f,//
		2.295f, 0.295f,
		2.33f, 0.2f,
		2.49f, 0.2f,
		2.47f, 0.3f,//
		2.523f, 0.1f,
		2.49f, 0.2f,
		2.33f, 0.2f,
		2.363f, 0.1f,//
		2.363f, 0.1f,
		2.373f, 0.045f,
		2.58f, -0.04f,
		2.523f, 0.1f,//
		2.02f, 0.61f,
		2.142f, 0.5f,
		2.473f, 0.6f,
		2.503f, 0.7f,//
		2.4f, 0.733f,
		2.53f, 0.76f,
		2.503f, 0.7f,//
		2.4f, 0.733f,
		2.28f, 0.72f,
		2.473f, 0.6f,
		2.503f, 0.7f,//
		2.047f, 0.535f, //左半圓點
		2.0f, 0.5f,
		1.978f, 0.46f,
		1.965f, 0.42f,
		1.965f, 0.37f,
		1.975f, 0.33f,
		1.992f, 0.295f,
		2.02f, 0.26f,
		2.06f, 0.23f,
		2.1f, 0.215f,
		2.16f, 0.212f,
		2.2f, 0.22f,
		2.24f, 0.24f,
		2.27f, 0.264f,
		2.24f, 0.315f,
		2.22f, 0.35f,
		2.18f, 0.4f,
		2.15f, 0.438f,
		2.11f, 0.48f,
		2.08f, 0.508f, //
		2.26f, 0.525f, //右半
		2.22f, 0.55f,
		2.18f, 0.565f,
		2.12f, 0.567f,
		2.08f, 0.557f,
		2.142f, 0.5f,//
		2.142f, 0.5f,
		2.197f, 0.44f,
		2.3f, 0.48f,
		2.26f, 0.525f,//
		2.317f, 0.44f,
		2.3f, 0.48f,
		2.197f, 0.44f,
		2.24f, 0.38f,//
		2.295f, 0.295f,
		2.315f, 0.33f,
		2.323f, 0.365f,
		2.325f, 0.4f,
		2.317f, 0.44f,
		2.24f, 0.38f
	};
	glInterleavedArrays(GL_V2F, 0, vertices_logo);
}

void setupInterleave_National(void) {
	static GLfloat vertices_National[] = {
		-2.55f, -0.475f,
		-2.52f, -0.475f,
		-2.55f, -0.6f,
		-2.52f, -0.7f,
		-2.55f, -0.7f,//
		-2.52f, -0.475f,
		-2.52f, -0.53f,
		-2.395f, -0.655f,
		-2.395f, -0.7f,//
		-2.395f, -0.475f,
		-2.36f, -0.475f,
		-2.395f, -0.655f,
		-2.36f, -0.7f,
		-2.395f, -0.7f,//
		-2.3f, -0.585f,
		-2.273f, -0.59f,
		-2.28f, -0.553f,
		-2.26f, -0.57f,
		-2.26f, -0.543f,
		-2.24f, -0.56f,
		-2.24f, -0.54f,
		-2.2f, -0.562f,
		-2.2f, -0.54f,
		-2.19f, -0.6f,
		-2.18f, -0.548f,
		-2.19f, -0.6f,
		-2.16f, -0.58f,
		-2.185f, -0.685f,
		-2.16f, -0.69f,
		-2.185f, -0.7f,
		-2.15f, -0.7f,//
		-2.19f, -0.6f,
		-2.19f, -0.625f,
		-2.24f, -0.608f,
		-2.26f, -0.638f,
		-2.27f, -0.615f,
		-2.273f, -0.65f,
		-2.29f, -0.63f,
		-2.276f, -0.66f,
		-2.3f, -0.643f,
		-2.276f, -0.67f,
		-2.305f, -0.67f,
		-2.26f, -0.688f,
		-2.28f, -0.7f,
		-2.24f, -0.69f,
		-2.25f, -0.71f,
		-2.22f, -0.685f,
		-2.22f, -0.708f,
		-2.185f, -0.66f,
		-2.185f, -0.685f,//
		-2.06f, -0.485f,
		-2.09f, -0.5f,
		-2.06f, -0.678f,
		-2.09f, -0.69f,
		-2.053f, -0.685f,
		-2.065f, -0.71f,
		-2.03f, -0.688f,
		-2.03f, -0.71f,//
		-2.11f, -0.54f,
		-2.11f, -0.56f,
		-2.035f, -0.54f,
		-2.035f, -0.56f,//
		-1.98f, -0.48f,
		-1.95f, -0.48f,
		-1.98f, -0.51f,
		-1.95f, -0.51f,//
		-1.98f, -0.54f,
		-1.95f, -0.54f,
		-1.98f, -0.705f,
		-1.95f, -0.705f,//
		-1.9f, -0.6f,
		-1.867f, -0.59f,
		-1.88f, -0.56f,
		-1.85f, -0.57f,
		-1.84f, -0.54f,
		-1.82f, -0.56f,
		-1.82f, -0.536f,
		-1.8f, -0.565f,
		-1.8f, -0.54f,
		-1.783f, -0.58f,
		-1.77f, -0.555f,
		-1.775f, -0.6f,
		-1.75f, -0.58f,
		-1.775f, -0.64f,
		-1.743f, -0.62f,
		-1.778f, -0.66f,
		-1.75f, -0.665f,
		-1.8f, -0.683f,
		-1.77f, -0.69f,
		-1.82f, -0.689f,
		-1.8f, -0.71f,
		-1.845f, -0.683f,
		-1.83f, -0.713f,
		-1.865f, -0.663f,
		-1.86f, -0.7f,
		-1.87f, -0.64f,
		-1.89f, -0.67f,
		-1.873f, -0.62f,
		-1.903f, -0.63f,
		-1.867f, -0.59f,
		-1.9f, -0.6f,//
		-1.69f, -0.54f,
		-1.66f, -0.54f,
		-1.69f, -0.705f,
		-1.66f, -0.705f,//
		-1.66f, -0.56f,
		-1.66f, -0.583f,
		-1.63f, -0.54f,
		-1.63f, -0.563f,
		-1.6f, -0.538f,
		-1.605f, -0.563f,
		-1.57f, -0.55f,
		-1.583f, -0.58f,
		-1.55f, -0.58f,
		-1.583f, -0.705f,
		-1.55f, -0.705f, //
		-1.49f, -0.585f,
		-1.463f, -0.59f,
		-1.47f, -0.553f,
		-1.45f, -0.57f,
		-1.45f, -0.543f,
		-1.43f, -0.56f,
		-1.43f, -0.54f,
		-1.39f, -0.562f,
		-1.39f, -0.54f,
		-1.38f, -0.6f,
		-1.37f, -0.548f,
		-1.38f, -0.6f,
		-1.35f, -0.58f,
		-1.375f, -0.685f,
		-1.35f, -0.69f,
		-1.375f, -0.7f,
		-1.34f, -0.7f,//
		-1.38f, -0.6f,
		-1.38f, -0.625f,
		-1.43f, -0.608f,
		-1.45f, -0.638f,
		-1.46f, -0.615f,
		-1.463f, -0.65f,
		-1.48f, -0.63f,
		-1.466f, -0.66f,
		-1.49f, -0.643f,
		-1.466f, -0.67f,
		-1.495f, -0.67f,
		-1.45f, -0.688f,
		-1.47f, -0.7f,
		-1.43f, -0.69f,
		-1.44f, -0.71f,
		-1.41f, -0.685f,
		-1.41f, -0.708f,
		-1.375f, -0.66f,
		-1.375f, -0.685f,//
		-1.285f, -0.475f,
		-1.255f, -0.475f,
		-1.285f, -0.708f,
		-1.255f, -0.708f
	};
	glInterleavedArrays(GL_V2F, 0, vertices_National);
}

void setupInterleave_Chung(void) {
	static GLfloat vertices_Chung[] = {
		-0.923f, -0.545f,
		-0.95f, -0.546f,
		-0.925f, -0.53f,
		-0.97f, -0.52f,
		-0.95f, -0.495f,
		-0.995f, -0.505f,
		-0.98f, -0.48f,
		-1.02f, -0.503f,
		-1.03f, -0.475f,
		-1.05f, -0.51f,
		-1.075f, -0.49f,
		-1.085f, -0.54f,
		-1.112f, -0.53f,
		-1.095f, -0.57f,
		-1.123f, -0.557f,
		-1.095f, -0.61f,
		-1.123f, -0.62f,
		-1.088f, -0.64f,
		-1.11f, -0.66f,
		-1.06f, -0.67f,
		-1.07f, -0.7f,
		-1.03f, -0.683f,
		-1.035f, -0.713f,
		-1.01f, -0.684f,
		-1.0f, -0.713f,
		-0.98f, -0.674f,
		-0.96f, -0.695f,
		-0.953f, -0.645f,
		-0.923f, -0.65f,
		-0.95f, -0.63f,
		-0.92f, -0.63f,//
		-0.862f, -0.475f,
		-0.835f, -0.475f,
		-0.862f, -0.705f,
		-0.835f, -0.705f,//
		-0.835f, -0.56f,
		-0.835f, -0.583f,
		-0.805f, -0.54f,
		-0.805f, -0.563f,
		-0.775f, -0.538f,
		-0.78f, -0.563f,
		-0.745f, -0.55f,
		-0.758f, -0.58f,
		-0.725f, -0.58f,
		-0.758f, -0.705f,
		-0.725f, -0.705f,//
		-0.662f, -0.54f,
		-0.63f, -0.54f,
		-0.662f, -0.66f,
		-0.63f, -0.65f,
		-0.653f, -0.69f,
		-0.625f, -0.67f,
		-0.635f, -0.705f,
		-0.61f, -0.685f,
		-0.61f, -0.715f,
		-0.59f, -0.686f,
		-0.595f, -0.715f,
		-0.58f, -0.683f,
		-0.57f, -0.702f,
		-0.55f, -0.66f,
		-0.55f, -0.683f,//
		-0.55f, -0.54f,
		-0.52f, -0.54f,
		-0.55f, -0.705f,
		-0.52f, -0.705f, //
		-0.46f, -0.54f,
		-0.43f, -0.54f,
		-0.46f, -0.705f,
		-0.43f, -0.705f,//
		-0.43f, -0.56f,
		-0.43f, -0.583f,
		-0.4f, -0.54f,
		-0.4f, -0.563f,
		-0.37f, -0.538f,
		-0.375f, -0.563f,
		-0.34f, -0.55f,
		-0.353f, -0.58f,
		-0.32f, -0.58f,
		-0.353f, -0.705f,
		-0.32f, -0.705f,//
		-0.15f, -0.558f,
		-0.15f, -0.59f,
		-0.18f, -0.537f,
		-0.17f, -0.565f,
		-0.2f, -0.535f,
		-0.19f, -0.56f,
		-0.22f, -0.538f,
		-0.21f, -0.563f,
		-0.24f, -0.55f,
		-0.23f, -0.58f,
		-0.26f, -0.58f,
		-0.236f, -0.6f,
		-0.27f, -0.62f,
		-0.236f, -0.64f,
		-0.265f, -0.65f,
		-0.225f, -0.667f,
		-0.25f, -0.68f,
		-0.21f, -0.683f,
		-0.22f, -0.705f,
		-0.19f, -0.685f,
		-0.19f, -0.71f,
		-0.17f, -0.678f,
		-0.17f, -0.705f,
		-0.15f, -0.65f,
		-0.15f, -0.685f,//
		-0.15f, -0.54f,
		-0.12f, -0.54f,
		-0.15f, -0.72f,
		-0.12f, -0.73f,
		-0.16f, -0.74f,
		-0.14f, -0.76f,
		-0.18f, -0.75f,
		-0.18f, -0.775f,
		-0.2f, -0.753f,
		-0.2f, -0.778f,
		-0.22f, -0.75f,
		-0.22f, -0.773f,
		-0.23f, -0.74f,
		-0.26f, -0.745f,
		-0.233f, -0.725f,
		-0.262f, -0.725f
	};
	glInterleavedArrays(GL_V2F, 0, vertices_Chung);
}

void setupInterleave_Hsing(void) {
	static GLfloat vertices_Hsing[] = {
		0.023f, -0.475f,
		0.055f, -0.475f,
		0.023f, -0.705f,
		0.055f, -0.705f,//
		0.055f, -0.57f,
		0.055f, -0.603f,
		0.18f, -0.57f,
		0.18f, -0.603f,//
		0.18f, -0.475f,
		0.213f, -0.475f,
		0.18f, -0.705f,
		0.213f, -0.705f,//
		0.4f, -0.585f,
		0.375f, -0.59f,
		0.398f, -0.57f,
		0.365f, -0.57f,
		0.38f, -0.547f,
		0.355f, -0.56f,
		0.36f, -0.54f,
		0.34f, -0.558f,
		0.338f, -0.536f,
		0.32f, -0.56f,
		0.31f, -0.54f,
		0.302f, -0.569f,
		0.28f, -0.555f,
		0.298f, -0.58f,
		0.27f, -0.574f,
		0.302f, -0.59f,
		0.27f, -0.6f,
		0.32f, -0.6f,
		0.31f, -0.63f,
		0.38f, -0.618f,
		0.365f, -0.644f,
		0.408f, -0.64f,
		0.381f, -0.66f,
		0.408f, -0.67f,
		0.375f, -0.676f,
		0.395f, -0.69f,
		0.36f, -0.685f,
		0.36f, -0.712f,
		0.34f, -0.69f,
		0.34f, -0.715f,
		0.308f, -0.68f,
		0.3f, -0.703f,
		0.297f, -0.665f,
		0.277f, -0.68f,
		0.295f, -0.653f,
		0.268f, -0.653f,//
		0.46f, -0.48f,
		0.49f, -0.48f,
		0.46f, -0.51f,
		0.49f, -0.51f,//
		0.46f, -0.54f,
		0.49f, -0.54f,
		0.46f, -0.705f,
		0.49f, -0.705f,//
		0.553f, -0.54f,
		0.583f, -0.54f,
		0.553f, -0.705f,
		0.583f, -0.705f,//
		0.583f, -0.56f,
		0.583f, -0.583f,
		0.613f, -0.54f,
		0.613f, -0.563f,
		0.643f, -0.538f,
		0.638f, -0.563f,
		0.673f, -0.55f,
		0.66f, -0.58f,
		0.693f, -0.58f,
		0.66f, -0.705f,
		0.693f, -0.705f, //
		0.863f, -0.558f,
		0.863f, -0.59f,
		0.833f, -0.537f,
		0.843f, -0.565f,
		0.813f, -0.535f,
		0.823f, -0.56f,
		0.793f, -0.538f,
		0.803f, -0.563f,
		0.773f, -0.55f,
		0.783f, -0.58f,
		0.753f, -0.58f,
		0.777f, -0.6f,
		0.743f, -0.62f,
		0.777f, -0.64f,
		0.748f, -0.65f,
		0.788f, -0.667f,
		0.763f, -0.68f,
		0.803f, -0.683f,
		0.793f, -0.705f,
		0.823f, -0.685f,
		0.823f, -0.71f,
		0.843f, -0.678f,
		0.843f, -0.705f,
		0.863f, -0.65f,
		0.863f, -0.685f,//
		0.863f, -0.54f,
		0.893f, -0.54f,
		0.863f, -0.72f,
		0.893f, -0.73f,
		0.853f, -0.74f,
		0.873f, -0.76f,
		0.833f, -0.75f,
		0.833f, -0.775f,
		0.813f, -0.753f,
		0.813f, -0.778f,
		0.793f, -0.75f,
		0.793f, -0.773f,
		0.783f, -0.74f,
		0.753f, -0.745f,
		0.78f, -0.725f,
		0.751f, -0.725f
	};
	glInterleavedArrays(GL_V2F, 0, vertices_Hsing);
}

void setupInterleave_University(void) {
	static GLfloat vertices_University[] = {
		1.032f, -0.475f,
		1.065f, -0.475f,
		1.032f, -0.64f,
		1.065f, -0.64f,
		1.05f, -0.68f,
		1.075f, -0.66f,
		1.1f, -0.71f,
		1.1f, -0.68f,
		1.125f, -0.715f,
		1.125f, -0.685f,
		1.16f, -0.71f,
		1.15f, -0.682f,
		1.195f, -0.693f,
		1.18f, -0.665f,
		1.22f, -0.66f,
		1.188f, -0.64f,
		1.22f, -0.475f,
		1.188f, -0.475f,//
		1.286f, -0.54f,
		1.316f, -0.54f,
		1.286f, -0.705f,
		1.316f, -0.705f,//
		1.316f, -0.56f,
		1.316f, -0.583f,
		1.346f, -0.54f,
		1.346f, -0.563f,
		1.376f, -0.538f,
		1.371f, -0.563f,
		1.406f, -0.55f,
		1.393f, -0.58f,
		1.426f, -0.58f,
		1.393f, -0.705f,
		1.426f, -0.705f,//
		1.487f, -0.48f,
		1.515f, -0.48f,
		1.487f, -0.51f,
		1.515f, -0.51f,//
		1.487f, -0.54f,
		1.515f, -0.54f,
		1.487f, -0.705f,
		1.515f, -0.705f,//
		1.56f, -0.54f,
		1.595f, -0.54f,
		1.63f, -0.705f,
		1.644f, -0.672f,
		1.66f, -0.705f,
		1.69f, -0.54f,
		1.723f, -0.54f,//
		1.787f, -0.607f,
		1.787f, -0.63f,
		1.885f, -0.607f,
		1.918f, -0.628f,
		1.885f, -0.595f,
		1.913f, -0.59f,
		1.87f, -0.573f,
		1.89f, -0.554f,
		1.857f, -0.563f,
		1.86f, -0.538f,
		1.84f, -0.56f,
		1.84f, -0.535f,
		1.82f, -0.563f,
		1.82f, -0.537f,
		1.797f, -0.58f,
		1.79f, -0.55f,
		1.787f, -0.607f,
		1.76f, -0.58f,
		1.787f, -0.63f,
		1.753f, -0.62f,
		1.793f, -0.66f,
		1.76f, -0.66f,
		1.82f, -0.685f,
		1.78f, -0.69f,
		1.82f, -0.685f,
		1.82f, -0.713f,
		1.84f, -0.69f,
		1.84f, -0.717f,
		1.863f, -0.683f,
		1.87f, -0.71f,
		1.885f, -0.658f,
		1.898f, -0.69f,
		1.885f, -0.658f,
		1.91f, -0.67f,
		1.885f, -0.658f,
		1.915f, -0.658f,//
		1.965f, -0.54f,
		1.996f, -0.54f,
		1.965f, -0.705f,
		1.996f, -0.705f,//
		1.996f, -0.56f,
		1.996f, -0.59f,
		2.015f, -0.54f,
		2.01f, -0.572f,
		2.03f, -0.536f,
		2.03f, -0.567f,
		2.06f, -0.545f,
		2.05f, -0.57f,//
		2.22f, -0.585f,
		2.195f, -0.59f,
		2.218f, -0.57f,
		2.185f, -0.57f,
		2.2f, -0.547f,
		2.175f, -0.56f,
		2.18f, -0.54f,
		2.16f, -0.558f,
		2.158f, -0.536f,
		2.14f, -0.56f,
		2.13f, -0.54f,
		2.122f, -0.569f,
		2.1f, -0.555f,
		2.118f, -0.58f,
		2.09f, -0.574f,
		2.122f, -0.59f,
		2.09f, -0.6f,
		2.14f, -0.6f,
		2.13f, -0.63f,
		2.2f, -0.618f,
		2.185f, -0.644f,
		2.228f, -0.64f,
		2.201f, -0.66f,
		2.228f, -0.67f,
		2.195f, -0.676f,
		2.215f, -0.69f,
		2.18f, -0.685f,
		2.18f, -0.712f,
		2.16f, -0.69f,
		2.16f, -0.715f,
		2.128f, -0.68f,
		2.12f, -0.703f,
		2.117f, -0.665f,
		2.097f, -0.68f,
		2.115f, -0.653f,
		2.088f, -0.653f, //
		2.277f, -0.48f,
		2.305f, -0.48f,
		2.277f, -0.51f,
		2.305f, -0.51f,//
		2.277f, -0.54f,
		2.305f, -0.54f,
		2.277f, -0.705f,
		2.305f, -0.705f, //
		2.405f, -0.485f,
		2.375f, -0.5f,
		2.405f, -0.678f,
		2.375f, -0.69f,
		2.412f, -0.685f,
		2.4f, -0.71f,
		2.435f, -0.688f,
		2.435f, -0.71f,//
		2.355f, -0.54f,
		2.355f, -0.56f,
		2.43f, -0.54f,
		2.43f, -0.56f,//
		2.465f, -0.54f,
		2.495f, -0.54f,
		2.527f, -0.7f,
		2.543f, -0.663f,//
		2.587f, -0.54f,
		2.62f, -0.54f,
		2.543f, -0.663f,
		2.556f, -0.72f,
		2.527f, -0.7f,
		2.545f, -0.74f,
		2.523f, -0.72f,
		2.53f, -0.76f,
		2.51f, -0.742f,
		2.51f, -0.774f,
		2.502f, -0.749f,
		2.478f, -0.774f,
		2.475f, -0.749f
	};
	glInterleavedArrays(GL_V2F, 0, vertices_University);
}

void glDrawArrays_國(void) {
	setupInterleave_國();

	glDrawArrays(GL_POLYGON, 0, 10);
	glDrawArrays(GL_POLYGON, 10, 8);
	glDrawArrays(GL_POLYGON, 18, 4);
	glDrawArrays(GL_POLYGON, 22, 4);
	glDrawArrays(GL_POLYGON, 26, 4);
	glDrawArrays(GL_POLYGON, 30, 5);
	glDrawArrays(GL_POLYGON, 35, 7);
	glDrawArrays(GL_POLYGON, 42, 6);
	glDrawArrays(GL_POLYGON, 48, 5);
	glDrawArrays(GL_POLYGON, 53, 3);
	glDrawArrays(GL_POLYGON, 56, 7);
	glDrawArrays(GL_POLYGON, 63, 5);
	glDrawArrays(GL_POLYGON, 68, 4);
	glDrawArrays(GL_POLYGON, 72, 7);
	glDrawArrays(GL_POLYGON, 79, 4);
	glDrawArrays(GL_POLYGON, 83, 3);
	glDrawArrays(GL_POLYGON, 86, 4);
	glDrawArrays(GL_POLYGON, 90, 3);
	glDrawArrays(GL_POLYGON, 93, 6);
	glDrawArrays(GL_POLYGON, 99, 3);
	glDrawArrays(GL_POLYGON, 102, 4);
	glDrawArrays(GL_POLYGON, 106, 3);
	glDrawArrays(GL_POLYGON, 109, 4);
	glDrawArrays(GL_POLYGON, 113, 4);
	glDrawArrays(GL_POLYGON, 117, 4);
	glDrawArrays(GL_POLYGON, 121, 9);
	glDrawArrays(GL_POLYGON, 130, 3);
	glDrawArrays(GL_POLYGON, 133, 3);
	glDrawArrays(GL_POLYGON, 136, 4);
	glDrawArrays(GL_POLYGON, 140, 4);
	glDrawArrays(GL_POLYGON, 144, 3);
	glDrawArrays(GL_POLYGON, 147, 5);
	glDrawArrays(GL_POLYGON, 152, 3);
	glDrawArrays(GL_POLYGON, 155, 5);
	glDrawArrays(GL_POLYGON, 160, 4);
	glDrawArrays(GL_POLYGON, 164, 4);
	glDrawArrays(GL_POLYGON, 168, 4);
	glDrawArrays(GL_POLYGON, 172, 4);
	glDrawArrays(GL_POLYGON, 176, 4);
	glDrawArrays(GL_POLYGON, 180, 4);
	glDrawArrays(GL_POLYGON, 184, 5);
}

void glDrawArrays_立(void) {
	setupInterleave_立();

	glDrawArrays(GL_POLYGON, 0, 3);
	glDrawArrays(GL_POLYGON, 3, 6);
	glDrawArrays(GL_POLYGON, 9, 6);
	glDrawArrays(GL_POLYGON, 15, 5);
	glDrawArrays(GL_POLYGON, 20, 3);
	glDrawArrays(GL_POLYGON, 23, 8);
	glDrawArrays(GL_POLYGON, 31, 4);
	glDrawArrays(GL_POLYGON, 35, 5);
	glDrawArrays(GL_POLYGON, 40, 4);
	glDrawArrays(GL_POLYGON, 44, 4);
	glDrawArrays(GL_POLYGON, 48, 3);
	glDrawArrays(GL_POLYGON, 51, 4);
	glDrawArrays(GL_POLYGON, 55, 7);
	glDrawArrays(GL_POLYGON, 62, 5);
	glDrawArrays(GL_POLYGON, 67, 7);
	glDrawArrays(GL_POLYGON, 74, 5);
	glDrawArrays(GL_POLYGON, 79, 4);
	glDrawArrays(GL_POLYGON, 83, 4);
	glDrawArrays(GL_POLYGON, 87, 8);
	glDrawArrays(GL_POLYGON, 95, 5);
	glDrawArrays(GL_POLYGON, 100, 4);
	glDrawArrays(GL_POLYGON, 104, 7);
}

void glDrawArrays_中(void) {
	setupInterleave_中();

	glDrawArrays(GL_POLYGON, 0, 4);
	glDrawArrays(GL_POLYGON, 4, 6);
	glDrawArrays(GL_POLYGON, 10, 10);
	glDrawArrays(GL_POLYGON, 20, 5);
	glDrawArrays(GL_POLYGON, 25, 6);
	glDrawArrays(GL_POLYGON, 31, 7);
	glDrawArrays(GL_POLYGON, 38, 3);
	glDrawArrays(GL_POLYGON, 41, 6);
	glDrawArrays(GL_POLYGON, 47, 5);
	glDrawArrays(GL_POLYGON, 52, 7);
	glDrawArrays(GL_POLYGON, 59, 4);
	glDrawArrays(GL_POLYGON, 63, 4);
	glDrawArrays(GL_POLYGON, 67, 4);
	glDrawArrays(GL_POLYGON, 71, 5);
	glDrawArrays(GL_POLYGON, 76, 5);
	glDrawArrays(GL_POLYGON, 81, 5);
}

void glDrawArrays_興(void) {
	setupInterleave_興();

	glDrawArrays(GL_POLYGON, 0, 5);
	glDrawArrays(GL_POLYGON, 5, 6);
	glDrawArrays(GL_POLYGON, 11, 5);
	glDrawArrays(GL_POLYGON, 16, 6);
	glDrawArrays(GL_POLYGON, 22, 4);
	glDrawArrays(GL_POLYGON, 26, 4);
	glDrawArrays(GL_POLYGON, 30, 3);
	glDrawArrays(GL_POLYGON, 33, 6);
	glDrawArrays(GL_POLYGON, 39, 5);
	glDrawArrays(GL_POLYGON, 44, 4);
	glDrawArrays(GL_POLYGON, 48, 4);
	glDrawArrays(GL_POLYGON, 52, 5);
	glDrawArrays(GL_POLYGON, 57, 4);
	glDrawArrays(GL_POLYGON, 61, 6);
	glDrawArrays(GL_POLYGON, 67, 5);
	glDrawArrays(GL_POLYGON, 72, 5);
	glDrawArrays(GL_POLYGON, 77, 4);
	glDrawArrays(GL_POLYGON, 81, 5);
	glDrawArrays(GL_POLYGON, 86, 6);
	glDrawArrays(GL_POLYGON, 92, 5);
	glDrawArrays(GL_POLYGON, 97, 5);
	glDrawArrays(GL_POLYGON, 102, 5);
	glDrawArrays(GL_POLYGON, 107, 4);
	glDrawArrays(GL_POLYGON, 111, 4);
	glDrawArrays(GL_POLYGON, 115, 9);
	glDrawArrays(GL_POLYGON, 124, 6);
	glDrawArrays(GL_POLYGON, 130, 9);
	glDrawArrays(GL_POLYGON, 139, 4);
	glDrawArrays(GL_POLYGON, 143, 4);
	glDrawArrays(GL_POLYGON, 147, 6);
	glDrawArrays(GL_POLYGON, 153, 8);
	glDrawArrays(GL_POLYGON, 161, 4);
	glDrawArrays(GL_POLYGON, 165, 8);
	glDrawArrays(GL_POLYGON, 173, 4);
	glDrawArrays(GL_POLYGON, 177, 4);
	glDrawArrays(GL_POLYGON, 181, 4);
	glDrawArrays(GL_POLYGON, 185, 4);
	glDrawArrays(GL_POLYGON, 189, 7);
	glDrawArrays(GL_POLYGON, 196, 6);
	glDrawArrays(GL_POLYGON, 202, 3);
	glDrawArrays(GL_POLYGON, 205, 4);
	glDrawArrays(GL_POLYGON, 209, 5);
	glDrawArrays(GL_POLYGON, 214, 5);
	glDrawArrays(GL_POLYGON, 219, 6);
	glDrawArrays(GL_POLYGON, 225, 4);
	glDrawArrays(GL_POLYGON, 229, 4);
	glDrawArrays(GL_POLYGON, 233, 4);
	glDrawArrays(GL_POLYGON, 237, 4);
	glDrawArrays(GL_POLYGON, 241, 3);
	glDrawArrays(GL_POLYGON, 244, 6);
	glDrawArrays(GL_POLYGON, 250, 3);
}

void glDrawArrays_大(void) {
	setupInterleave_大();

	glDrawArrays(GL_POLYGON, 0, 8);
	glDrawArrays(GL_POLYGON, 8, 4);
	glDrawArrays(GL_POLYGON, 12, 4);
	glDrawArrays(GL_POLYGON, 16, 5);
	glDrawArrays(GL_POLYGON, 21, 4);
	glDrawArrays(GL_POLYGON, 25, 5);
	glDrawArrays(GL_POLYGON, 30, 6);
	glDrawArrays(GL_POLYGON, 36, 5);
	glDrawArrays(GL_POLYGON, 41, 4);
	glDrawArrays(GL_POLYGON, 45, 5);
	glDrawArrays(GL_POLYGON, 50, 6);
	glDrawArrays(GL_POLYGON, 56, 6);
	glDrawArrays(GL_POLYGON, 62, 5);
	glDrawArrays(GL_POLYGON, 67, 5);
	glDrawArrays(GL_POLYGON, 72, 5);
	glDrawArrays(GL_POLYGON, 77, 5);
	glDrawArrays(GL_POLYGON, 82, 5);
	glDrawArrays(GL_POLYGON, 87, 5);
	glDrawArrays(GL_POLYGON, 92, 4);
	glDrawArrays(GL_POLYGON, 96, 5);
}

void glDrawArrays_學(void) {
	setupInterleave_學();

	glDrawArrays(GL_POLYGON, 0, 5);
	glDrawArrays(GL_POLYGON, 5, 8);
	glDrawArrays(GL_POLYGON, 13, 5);
	glDrawArrays(GL_POLYGON, 18, 7);
	glDrawArrays(GL_POLYGON, 25, 8);
	glDrawArrays(GL_POLYGON, 33, 4);
	glDrawArrays(GL_POLYGON, 37, 3);
	glDrawArrays(GL_POLYGON, 40, 3);
	glDrawArrays(GL_POLYGON, 43, 4);
	glDrawArrays(GL_POLYGON, 47, 8);
	glDrawArrays(GL_POLYGON, 55, 3);
	glDrawArrays(GL_POLYGON, 58, 3);
	glDrawArrays(GL_POLYGON, 61, 6);
	glDrawArrays(GL_POLYGON, 67, 4);
	glDrawArrays(GL_POLYGON, 71, 4);
	glDrawArrays(GL_POLYGON, 75, 7);
	glDrawArrays(GL_POLYGON, 82, 4);
	glDrawArrays(GL_POLYGON, 86, 4);
	glDrawArrays(GL_POLYGON, 90, 4);
	glDrawArrays(GL_POLYGON, 94, 6);
	glDrawArrays(GL_POLYGON, 100, 7);
	glDrawArrays(GL_POLYGON, 107, 4);
	glDrawArrays(GL_POLYGON, 111, 6);
	glDrawArrays(GL_POLYGON, 117, 4);
	glDrawArrays(GL_POLYGON, 121, 5);
	glDrawArrays(GL_POLYGON, 126, 4);
	glDrawArrays(GL_POLYGON, 130, 5);
	glDrawArrays(GL_POLYGON, 135, 7);
	glDrawArrays(GL_POLYGON, 142, 4);
	glDrawArrays(GL_POLYGON, 146, 8);
	glDrawArrays(GL_POLYGON, 154, 3);
	glDrawArrays(GL_POLYGON, 157, 5);
	glDrawArrays(GL_POLYGON, 162, 8);
	glDrawArrays(GL_POLYGON, 170, 3);
	glDrawArrays(GL_POLYGON, 173, 4);
	glDrawArrays(GL_POLYGON, 177, 4);
	glDrawArrays(GL_POLYGON, 181, 3);
	glDrawArrays(GL_POLYGON, 184, 3);
	glDrawArrays(GL_POLYGON, 187, 5);
	glDrawArrays(GL_POLYGON, 192, 5);
	glDrawArrays(GL_POLYGON, 197, 6);
	glDrawArrays(GL_POLYGON, 203, 10);
	glDrawArrays(GL_POLYGON, 213, 4);
	glDrawArrays(GL_POLYGON, 217, 5);
	glDrawArrays(GL_POLYGON, 222, 4);
	glDrawArrays(GL_POLYGON, 226, 3);
	glDrawArrays(GL_POLYGON, 229, 5);
	glDrawArrays(GL_POLYGON, 234, 4);
	glDrawArrays(GL_POLYGON, 238, 4);
	glDrawArrays(GL_POLYGON, 242, 4);
	glDrawArrays(GL_POLYGON, 246, 4);
	glDrawArrays(GL_POLYGON, 250, 5);
	glDrawArrays(GL_POLYGON, 255, 8);
	glDrawArrays(GL_POLYGON, 263, 3);
	glDrawArrays(GL_POLYGON, 266, 3);
	glDrawArrays(GL_POLYGON, 269, 4);
}

void glDrawArrays_logo(void) {
	glPushMatrix();
		glTranslatef(2.15, 0.36, 0.0);
		glRotatef(logo_angle, 0.0, 0.0, 1.0);
		glTranslatef(-2.15, -0.36, 0.0);

		setupInterleave_logo();
		glColor4f(1.0f, 0.0f, 0.0f, 1.0);
			glDrawArrays(GL_POLYGON, 112, 20);
			glDrawArrays(GL_POLYGON, 132, 6);
			glDrawArrays(GL_POLYGON, 138, 4);
			glDrawArrays(GL_POLYGON, 142, 4);
			glDrawArrays(GL_POLYGON, 146, 6);
		glColor4f(0.29803f, 0.53725f, 0.63922f, 1.0);

		logo_angle = (logo_angle + 10) % 360;
		if (logo_angle < 60) {
			glColor4f(1.0f, 0.50196f, 0.0f, 1.0f);
		}
		else if (logo_angle >= 60 && logo_angle < 120) {
			glColor4f(1.0f, 1.0f, 0.0f, 1.0);
		}
		else if (logo_angle >= 120 && logo_angle < 180) {
			glColor4f(0.50196f, 1.0f, 0.0f, 1.0);
		}
		else if (logo_angle >= 180 && logo_angle < 240) {
			glColor4f(0.0f, 0.50196f, 1.0f, 1.0);
		}
		else if (logo_angle >= 240 && logo_angle < 300) {
			glColor4f(0.25098f, 0.0f, 1.0f, 1.0);
		}
		else glColor4f(0.50196f, 0.0f, 1.0f, 1.0);
	
		if (polygon_offset == true) { 
			glEnable(GL_POLYGON_OFFSET_FILL);
			glPolygonOffset(-1.0, -1.0);
		}
			glDrawArrays(GL_POLYGON, 0, 3);
			glDrawArrays(GL_POLYGON, 3, 4);
			glDrawArrays(GL_POLYGON, 7, 4);
			glDrawArrays(GL_POLYGON, 11, 4);
			glDrawArrays(GL_POLYGON, 15, 4);
			glDrawArrays(GL_POLYGON, 19, 4);
			glDrawArrays(GL_POLYGON, 23, 4);
			glDrawArrays(GL_POLYGON, 27, 14);
			glDrawArrays(GL_POLYGON, 41, 4);
			glDrawArrays(GL_POLYGON, 45, 4);
			glDrawArrays(GL_POLYGON, 49, 4);
			glDrawArrays(GL_POLYGON, 53, 4);
			glDrawArrays(GL_POLYGON, 57, 4);
			glDrawArrays(GL_POLYGON, 61, 4);
			glDrawArrays(GL_POLYGON, 65, 4);
			glDrawArrays(GL_POLYGON, 69, 4);
			glDrawArrays(GL_POLYGON, 73, 4);
			glDrawArrays(GL_POLYGON, 77, 4);
			glDrawArrays(GL_POLYGON, 81, 4);
			glDrawArrays(GL_POLYGON, 85, 4);
			glDrawArrays(GL_POLYGON, 89, 4);
			glDrawArrays(GL_POLYGON, 93, 4);
			glDrawArrays(GL_POLYGON, 97, 4);
			glDrawArrays(GL_POLYGON, 101, 4);
			glDrawArrays(GL_POLYGON, 105, 3);
			glDrawArrays(GL_POLYGON, 108, 4);
		if (polygon_offset == true) glDisable(GL_POLYGON_OFFSET_FILL);
		
	glPopMatrix();
}

void glDrawArrays_National(void) {
	setupInterleave_National();

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 5);
	glDrawArrays(GL_TRIANGLE_STRIP, 5, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 9, 5);
	glDrawArrays(GL_TRIANGLE_STRIP, 14, 17);
	glDrawArrays(GL_TRIANGLE_STRIP, 31, 19);
	glDrawArrays(GL_TRIANGLE_STRIP, 50, 8);
	glDrawArrays(GL_TRIANGLE_STRIP, 58, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 62, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 66, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 70, 31);
	glDrawArrays(GL_TRIANGLE_STRIP, 101, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 105, 11);
	glDrawArrays(GL_TRIANGLE_STRIP, 116, 17);
	glDrawArrays(GL_TRIANGLE_STRIP, 133, 19);
	glDrawArrays(GL_TRIANGLE_STRIP, 152, 4);
}

void glDrawArrays_Chung(void) {
	setupInterleave_Chung();

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 31);
	glDrawArrays(GL_TRIANGLE_STRIP, 31, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 35, 11);
	glDrawArrays(GL_TRIANGLE_STRIP, 46, 15);
	glDrawArrays(GL_TRIANGLE_STRIP, 61, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 65, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 69, 11);
	glDrawArrays(GL_TRIANGLE_STRIP, 80, 25);
	glDrawArrays(GL_TRIANGLE_STRIP, 105, 16);
}

void glDrawArrays_Hsing(void) {
	setupInterleave_Hsing();

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 4, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 8, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 12, 36);
	glDrawArrays(GL_TRIANGLE_STRIP, 48, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 52, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 56, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 60, 11);
	glDrawArrays(GL_TRIANGLE_STRIP, 71, 25);
	glDrawArrays(GL_TRIANGLE_STRIP, 96, 16);
}

void glDrawArrays_University(void) {
	setupInterleave_University();

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 18);
	glDrawArrays(GL_TRIANGLE_STRIP, 18, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 22, 11);
	glDrawArrays(GL_TRIANGLE_STRIP, 33, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 37, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 41, 7);
	glDrawArrays(GL_TRIANGLE_STRIP, 48, 36);
	glDrawArrays(GL_TRIANGLE_STRIP, 84, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 88, 8);
	glDrawArrays(GL_TRIANGLE_STRIP, 96, 36);
	glDrawArrays(GL_TRIANGLE_STRIP, 132, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 136, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 140, 8);
	glDrawArrays(GL_TRIANGLE_STRIP, 148, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 152, 4);
	glDrawArrays(GL_TRIANGLE_STRIP, 156, 13);
}

void draw_background(void) {
	glDrawArrays_國();
	glDrawArrays_立();
	glDrawArrays_中();
	glDrawArrays_興();
	glDrawArrays_大();
	glDrawArrays_學();
	glDrawArrays_National();
	glDrawArrays_Chung();
	glDrawArrays_Hsing();
	glDrawArrays_University();;
	glDrawArrays_logo();
}

void draw_ground(void) {
	glPushMatrix();
		glColor3f(0.17647f, 0.49803f, 0.17647f);

		glScalef(12, 0.5, 15);
		//jump的時候，地板也要跟著logo一起動
		if(jump==true && jump_y<5.0) glTranslatef(0.0, jump_y-5, 0.0);
		else {
			glTranslatef(0.0, -5, 0.0);
		}
		glutSolidSphere(1, 20, 16);

	glPopMatrix();
}

void draw_hand_right(void) {
	glPushMatrix();
		glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
		glPushMatrix(); //手臂1
			glTranslatef(0.0, -2.12, 0.5);
			glRotatef(15, 0, 1, 0);
			glScalef(2, 2, 5);
			//glutWireCube(0.3);
			glutSolidSphere(0.15, 20, 16); 
		glPopMatrix(); 

		glPushMatrix();
			glTranslatef(0.0, 0.0, 0.35);
			glPushMatrix(); //手臂2
				glRotatef(15, 0, 1, 0);
				glTranslatef(0.0, -1.9, -1.2);
				glRotatef(25, 1, 0, 0);
				glScalef(2, 2, 4.5);
				//glutWireCube(0.3);
				glutSolidSphere(0.15, 20, 16);
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_red[] = { 1.0, 0.0, 0.0, 1.0 }; 
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_red);

				glPushMatrix();	//左上手指1
					glRotatef(15, 0, 1, 0);
					glTranslatef(-0.45, -1.6, -1.4);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //左上手指2
					glRotatef(15, 0, 1, 0);
					glTranslatef(-0.63, -1.45, -1.5);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_orange[] = { 1.0, 0.68627, 0.37647, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_orange);

				glPushMatrix(); //左下手指1
					glRotatef(15, 0, 1, 0);
					glTranslatef(-0.45, -1.85, -1.5);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //左下手指2
					glRotatef(15, 0, 1, 0);
					glTranslatef(-0.59, -1.75, -1.7);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_yellow[] = { 1.0, 1.0, 0.0, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_yellow);

				glPushMatrix(); //右上手指1
					glRotatef(15, 0, 1, 0);
					glTranslatef(0.38, -1.6, -1.4);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //右上手指2
					glRotatef(15, 0, 1, 0);
					glTranslatef(0.48, -1.45, -1.5);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_green[] = { 0.0, 1.0, 0.0, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_green);

				glPushMatrix(); //右下手指1
					glRotatef(15, 0, 1, 0);
					glTranslatef(0.49, -1.85, -1.5);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //右下手指2
					glRotatef(15, 0, 1, 0);
					glTranslatef(0.69, -1.75, -1.73);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 4);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();
		glPopMatrix();
	
	glPopMatrix();
}

void draw_hand_left(void) {
	glPushMatrix();
		glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
		glPushMatrix(); //手臂1
			glTranslatef(0.0, -2.12, 0.5);
			glRotatef(-10, 0, 1, 0);
			glScalef(2, 2, 5);
			//glutWireCube(0.3);
			glutSolidSphere(0.15, 20, 16);
		glPopMatrix();

		glPushMatrix();
			glTranslatef(0.0, 0.0, 0.3);
			glPushMatrix(); //手臂2
				glRotatef(-10, 0, 1, 0);
				glTranslatef(0.0, -1.9, -1.2);
				glRotatef(25, 1, 0, 0);
				glScalef(2, 2, 4.5);
				//glutWireCube(0.3);
				glutSolidSphere(0.15, 20, 16);
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_blue[] = { 0.0, 0.0, 1.0, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_blue);

				glPushMatrix();	//左上手指1
					glRotatef(-10, 0, 1, 0);
					glTranslatef(-0.35, -1.6, -1.4);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //左上手指2
					glRotatef(-10, 0, 1, 0);
					glTranslatef(-0.50, -1.45, -1.5);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_lblue[] = { 0.0, 0.79215, 0.79215, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_lblue);

				glPushMatrix(); //左下手指1
					glRotatef(-10, 0, 1, 0);
					glTranslatef(-0.40, -1.85, -1.5);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //左下手指2
					glRotatef(-10, 0, 1, 0);
					glTranslatef(-0.59, -1.75, -1.7);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_purple[] = { 0.35686, 0.0, 0.68235, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_purple);

				glPushMatrix(); //右上手指1
					glRotatef(-10, 0, 1, 0);
					glTranslatef(0.42, -1.6, -1.4);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //右上手指2
					glRotatef(-10, 0, 1, 0);
					glTranslatef(0.58, -1.45, -1.5);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();

			glPushMatrix();
				GLfloat mat_ambient_pink[] = { 1.0, 0.0, 0.5, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_pink);

				glPushMatrix(); //右下手指1
					glRotatef(-10, 0, 1, 0);
					glTranslatef(0.42, -1.85, -1.5);
					glRotatef(90, 0, 1, 0);
					glRotatef(30, 0, 0, 1);
					glScalef(2, 2, 5);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();

				glPushMatrix(); //右下手指2
					glRotatef(-10, 0, 1, 0);
					glTranslatef(0.56, -1.75, -1.7);
					glRotatef(30, 1, 0, 0);
					glScalef(2, 2, 4);
					//glutWireCube(0.075);
					glutSolidSphere(0.0375, 20, 16);
				glPopMatrix();
			glPopMatrix();
		glPopMatrix();

	glPopMatrix();
	
}

void draw_sun(void) {
	glPushMatrix();
		GLfloat sun_mat_ambient[] = { 0.0f, 0.0f, 0.0f, 1.0f };  
		GLfloat sun_mat_diffuse[] = { 0.0f, 0.0f, 0.0f, 1.0f };  
		GLfloat sun_mat_specular[] = { 0.0f, 0.0f, 0.0f, 1.0f };   
		GLfloat sun_mat_emission[] = { 1.0f, 1.0f, 1.0f, 1.0f };
		GLfloat sun_mat_shininess = 0.0f;

		glMaterialfv(GL_FRONT, GL_AMBIENT, sun_mat_ambient);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, sun_mat_diffuse);
		glMaterialfv(GL_FRONT, GL_SPECULAR, sun_mat_specular);
		glMaterialfv(GL_FRONT, GL_EMISSION, sun_mat_emission);
		glMaterialf(GL_FRONT, GL_SHININESS, sun_mat_shininess);
		glTranslatef(5.5, 5.5, -5.0);
		glutSolidSphere(0.5, 40, 32);
	glPopMatrix();
}

void draw_solar_system_left(void) {
	glPushMatrix();	
		glTranslatef(-1.5, -0.5, -1.0);
		glutSolidSphere(0.5, 20, 16);   //draw sun 
		glRotatef((GLfloat)year, 0.0, 1.0, 0.0);
		glTranslatef(1.0, 0.0, 0.0);
		glRotatef((GLfloat)day, 0.0, 1.0, 0.0);
		glutSolidSphere(0.2, 10, 8);    // draw smaller planet
	glPopMatrix();
}

void draw_obj_model3(void) { //green model
	glPushMatrix();
		char name3[50] = "human.obj";
		model3 = loadModel(name3);

		if (snipe == true && view_z <= 3.0) {
			glTranslatef(0.0, 0.0, 3.0); //瞄準時拉近
		}
		else if (view_z > 3.0) { //太靠近物體，不能用瞄準鏡
			snipe = false;
		}
		//model position&size
		glTranslatef(3.0, -0.5, 0.0);

		//model animations
		glTranslatef(view_x, 0.0, view_z);
		if (jump == true && jump_y < 5.0) glTranslatef(0.0, jump_y + 0.9, 0.0); //jump的時候，model也要跟著logo一起動
		else {
			glTranslatef(0.0, 0.9, 0.0);
		}

		//draw model表面
		glScalef(0.2, 0.2, 0.2);
		glColor3f(0.25098, 0.87843, 0.81568);
		//drawModelVertex(2.0, model1); //draw model verteices
		drawModelFaces(model3);
	glPopMatrix();
} 

void draw_obj_model2(void) { //pink model
	glPushMatrix();
		char name2[50] = "human.obj";
		model2 = loadModel(name2);

		if (snipe == true && view_z <= 3.0) {
			glTranslatef(0.0, 0.0, 3.0); //瞄準時拉近
		}
		else if (view_z > 3.0) { //太靠近物體，不能用瞄準鏡
			snipe = false;
		}
		//model position
		glTranslatef(-3.0, -0.5, 0.0);

		//model animations
		glTranslatef(view_x, 0.0, view_z);
		if (jump == true && jump_y < 5.0) glTranslatef(0.0, jump_y + 0.9, 0.0); //jump的時候，model也要跟著logo一起動
		else {
			glTranslatef(0.0, 0.9, 0.0);
		}

		//draw model表面
		glScalef(0.2, 0.2, 0.2);
		glColor3f(0.94117, 0.50196, 0.50196);	
		//drawModelVertex(2.0, model1); //draw model verteices
		drawModelFaces(model2);
	glPopMatrix();
}

void draw_obj_model1(void) { //blue model
	glPushMatrix();
		char name1[50] = "human.obj";
		model1 = loadModel(name1);

		if (snipe == true && view_z <= 3.0) {
			glTranslatef(0.0, 0.0, 3.0); //瞄準時拉近
		}
		else if (view_z > 3.0) { //太靠近物體，不能用瞄準鏡
			snipe = false;
		}
		//model position
		glTranslatef(-4.0, -0.5, 0.0);

		//model animations
		glTranslatef(view_x, 0.0, view_z);
		if (jump == true && jump_y < 5.0) glTranslatef(0.0, jump_y + 0.9, 0.0); //jump的時候，model也要跟著logo一起動
		else {
			glTranslatef(0.0, 0.9, 0.0);
		}

		//draw model表面
		glScalef(0.2, 0.2, 0.2);
		glColor3f(0.39215, 0.58431, 0.92941);
		//drawModelVertex(2.0, model1); //draw model verteices
		drawModelFaces(model1);
	glPopMatrix();
}

void fire_solar_system(void) {
	glPushMatrix();
		//先把前面glScalef(0.05, 0.05, 0.05)的量回復成最原始的比例
		//否則fire出去的太陽系，前進比例會不準 (導致 站在遠處看像射中，但走進看卻沒射中)
		glScalef(20, 20, 20); 
		glTranslatef(0.0, 0.0, fire_z);
		glScalef(0.05, 0.05, 0.05);

		draw_solar_system_left();
	glPopMatrix();

	if (logo_z + fire_z <= 0.35) { //if hit (logo和太陽系的相對距離夠小)
		if (view_x <= 2.5 && view_x >= -2.8) { //hit logo
			printf("hit logo\n");
			is_hit = true; fire = false;
		}
		else if (view_x <= 4.0 && view_x >= 3.8) { //hit left1 model
			printf("hit left1 model\n");
			fire = false; hit_m1 = false;
			hp1 -= shot; //射中model，扣血
			if (hp1 <= 0) {
				hit_m1 = true; hp1 = 0;
			}
		}
		else if (view_x <= 3.0 && view_x >= 2.8) { //hit left2 model
			printf("hit left2 model\n");
			fire = false; hit_m2 = false;
			hp2 -= shot; //射中mode2，扣血
			if (hp2 <= 0) {
				hit_m2 = true; hp2 = 0;
			}
		}
		else if (view_x <= -2.9 && view_x >= -3.1) { //hit right1 model
			printf("hit right1 model\n");
			hit_m3 = false; fire = false; is_hit = false;
			hp3 -= shot; //射中mode3，扣血
			if (hp3 <= 0) {
				hit_m3 = true; hp3 = 0;
			}
		}
		else { //miss all
			printf("miss\n");
			is_hit = false; fire = false;
		}
	}
}

void fire_enemy_bullet(void) {
	if (enemy_fire == true && hit_me == false) {
		glPushMatrix();
			switch (enemy_attack) {
				case 1:
					glTranslatef(-4.0, 0.0, 0.0);
					break;
				case 2:
					glTranslatef(-3.0, 0.0, 0.0);
					break;
				case 3:
					glTranslatef(3.0, 0.0, 0.0);
					break;
			}
			if (snipe == true && view_z <= 3.0) {
				glTranslatef(0.0, 0.0, 3.0); //瞄準時拉近
			}
			else if (view_z > 3.0) { //太靠近物體，不能用瞄準鏡
				snipe = false;
			}
			if(jump==true) glTranslatef(view_x, jump_y, view_z+attack_z);
			else glTranslatef(view_x, 0.0, view_z + attack_z);
			glColor3f(1, 1, 0);
			glutSolidSphere(0.08, 10, 8);
		glPopMatrix();
	}

	if (logo_z <= attack_z) { //hit me
		enemy_fire = false;  attack_z = 0.0;

		if ((enemy_attack == 1 && view_x >= 3.79 && view_x <= 4.2) || //被blue model命中
			(enemy_attack == 2 && view_x >= 2.79 && view_x <= 3.2) || //被pink model命中
			(enemy_attack == 3 && view_x >= -3.2 && view_x <= -2.79)) { //被green model命中
			hit_me = true;
			my_hp = my_hp - shot; //扣血
			if (my_hp <= 0) {
				my_hp = 0;
			}
		}
		else {
			hit_me = false;
		}
	}
}

int draw_explode(void) {
	if (explode_rad <= 2 && explode_rad > 1) { //hit且正在做explode動畫 且 物體要在場上
		if ((hit_m1 && curr_m1) || (hit_m2 && curr_m2) || (hit_m3 && curr_m3) || (is_hit && curr_logo)) {
			glPushMatrix();
				GLfloat mat_ambient_red[] = { 1.0, 0.0, 0.0, 1.0 };
				glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_red);
				glTranslatef(-0.8, -0.2, 0.0);
				glutSolidSphere(explode_rad, 20, 16);   //draw explosion
			glPopMatrix();

			glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient_red);

			return 1; //正在explode
		}
	}
	else return 0; //結束explode
}

void draw_fog(void) {
	if (fog == true) { 
		glEnable(GL_FOG);
		{
			GLfloat fogColor[4] = { 0.5, 0.5, 0.5, 1.0 };
			glFogi(GL_FOG_MODE, GL_EXP);
			glFogfv(GL_FOG_COLOR, fogColor);
			glFogf(GL_FOG_DENSITY, 0.35);
			glHint(GL_FOG_HINT, GL_DONT_CARE);
			glFogf(GL_FOG_START, 1.0);
			glFogf(GL_FOG_END, 5.0);
		}
		glClearColor(0.5, 0.5, 0.5, 1.0);  /* fog color */
	}
	else if (fog == false && move_dir == 'f') {
		glDisable(GL_FOG);
		glClearColor(0.0, 0.0, 0.0, 1.0);
	}
}

void drawFilledCircle(GLfloat x, GLfloat y, GLfloat radius) {
	int i;
	int triangleAmount = 20; //# of triangles used to draw circle

	//GLfloat radius = 0.8f; //radius
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
	glVertex2f(x, y); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			x + (radius * cos(i * twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
}

void draw_snipe(void) {
	if (snipe == true) {
		glPushMatrix();
			glEnable(GL_BLEND);
			glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA);

			glColor4f(1.0f, 0.53725f, 0.63922f, 0.5);
			glTranslatef(0.0, 0.0, 6.0);
			drawFilledCircle(0.0, 0.0, 0.5);

			glDisable(GL_BLEND);
		glPopMatrix();
	}
}

void auto_rotate(void) {
	Sleep(60);		
	year = (year + 5) % 360;
	day = (day + 10) % 360;
	if (fire==true && is_hit==false) { //按下發射鍵，太陽系的z往前走
		fire_z -= step_size;
	}
	if (fire == false && (is_hit == true || hit_m1==true || hit_m2==true || hit_m3==true)) {  //命中後，爆炸的火花直徑會變大
		explode_rad += 0.5;
	}
	
	jump_time+=2;
	if (jump == true && is_down == false) { //logo往上動(正在往下跳)
		if (jump_y < 3) jump_y = 0.5 * (jump_time * jump_time * gravity); //位移= (1/2)*g*(t^2)
		else jump = false;
	}
	else if (jump == true && is_down == true) { //logo往下動(正在往上跳)
		if (jump_y > -1) jump_y = -0.5 * (jump_time * jump_time * gravity);
		else is_down = false; 
	}

	if (enemy_fire==false) { //上一位攻擊完 換人攻擊
		if (enemy_attack == total_enemy) {
			enemy_attack = 1; //最後一位攻擊完，回到第一位敵人
		}
		else {
			enemy_attack++; //下一位
		}
		enemy_fire = true; hit_me = false;
	}

	if (enemy_fire = true && hit_me == false) { //子彈朝我飛來
		attack_z += step_size;
	}
	
	glutPostRedisplay();
}

void display(void)	
{
	double equation_x[4] = { 0.0, 0.0, 1.0, 0.0 }; //clip plane的傳入參數
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glEnable(GL_COLOR_MATERIAL); //讓我可以直接使用glColor3f()指定的顏色，而不用再去一個個宣告material
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

	glPushMatrix();	
		if (anti_aliasing == true) { //anti-aliasing
			glEnable(GL_MULTISAMPLE);
		}
		else{
			glDisable(GL_MULTISAMPLE);
		}

		draw_fog(); //畫霧
		draw_ground(); //畫地板
		
		glColor3f(0.29803f, 0.53725f, 0.63922f);	
		switch (move_dir) {
			case 'w':
				view_z += step_size;
				logo_z -= step_size;
				break;
			case 'a':
				view_x += step_size;
				break;
			case 's':
				view_z -= step_size;
				logo_z += step_size;
				break;
			case 'd':
				view_x -= step_size;
				break;
			case 'z':
				fire = true; is_hit = false; hit_m1 = false; hit_m2 = false; hit_m3 = false;
				fire_z = 0.0; explode_rad = 1.0; recover = false;
				break;
			case 'x':
				if (swing == false) swing = true;
				else swing = false;
				break;
			case 'r':
				if (recover == false) {
					recover = true; 
					curr_logo = true; curr_m1 = true; curr_m2 = true; curr_m3 = true;
				}
				hp1 = 100; hp2 = 100; hp3 = 100; my_hp = 100; //回滿血
				break;
		}
		move_dir = 'q';

		if (snipe == true && view_z<=3.0) {
				glTranslatef(0.0, 0.0, 3.0); //瞄準時拉近
		}
		else if(view_z > 3.0){ //太靠近物體，不能用瞄準鏡
			snipe = false;
		}

		glTranslatef(view_x, 0.0, view_z); 

		if (jump == true) {
			glTranslatef(0.0, jump_y, 0.0); //正在跳，logo移動
		}

		if ((is_hit == true && explode_rad > 2 && recover == false) || curr_logo==false) { //爆炸後logo消失 && 目前不在場上
			curr_logo = false;
		}
		else { //其餘時間都要畫logo
			draw_background();  //draw nchu background
			curr_logo = true;
		}
		glColor3f(1.0, 1.0, 1.0);
	glPopMatrix();

	if ((hit_m1 == true && explode_rad > 2 && recover == false) || (curr_m1==false)) { //爆炸後model消失 && 目前不在場上
		curr_m1 = false;
	} 
	else { //其餘時間都要畫model
		draw_obj_model1();
		curr_m1 = true;
	}	
	if ((hit_m2 == true && explode_rad > 2 && recover == false) || (curr_m2 == false)) { //爆炸後model消失 && 目前不在場上
		curr_m2 = false;
	}
	else { //其餘時間都要畫model
		draw_obj_model2();
		curr_m2 = true;
	}
	if ((hit_m3 == true && explode_rad > 2 && recover == false) || (curr_m3 == false)) { //爆炸後model消失 && 目前不在場上
		curr_m3 = false;
	}
	else { //其餘時間都要畫model
		draw_obj_model3();
		curr_m3 = true;
	}

	fire_enemy_bullet(); //model攻擊

	draw_snipe(); //畫瞄準鏡，NEED to draw model from BACK TO FRONT to get transparency

	glDisable(GL_COLOR_MATERIAL); //disable 使用glColor3f()畫顏色

	draw_sun(); //畫太陽

	glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
	glMaterialfv(GL_FRONT_AND_BACK, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, low_shininess);
	glMaterialfv(GL_FRONT_AND_BACK, GL_EMISSION, no_mat);

	glPushMatrix();
		glLoadIdentity();
		glTranslatef(0.0, 0.0, -0.25); 
		glScalef(0.05, 0.05, 0.05); 

		//draw right hand
		glPushMatrix();
			glTranslatef(2.5, 0.0, 0.0); 
			if (swing == true) {
				glPushMatrix();
					glTranslatef(0.0, -2.0, 1.5);
					glRotatef((GLfloat)day, -1.0, 0.0, 0.0); //swing right hand
					glTranslatef(0.0, 2.0, -1.5);

					draw_hand_right();
				glPopMatrix();
			}
			else {
				draw_hand_right();
			}
		glPopMatrix();

		//draw left hand
		glPushMatrix();
			glTranslatef(-2.0, 0.0, 0.0);
			if (fire_z >= -step_size*2 && fire_z < 0) { //剛按下fire，左手做fire的animation
				glPushMatrix();
					glTranslatef(0.0, 0.0, -1.0); 
					draw_hand_left();	//draw left hand
				glPopMatrix();
			}
			else {
				draw_hand_left();	//draw left hand
			}
		glPopMatrix();

		//draw solar system
		glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
		if(fire==true) fire_solar_system(); //按下發射鍵，尚未抵達
		else {
			if (draw_explode()==0) { //miss or 尚未發射 or 爆炸已結束redraw
				draw_solar_system_left(); 
			}
		}
	glPopMatrix();

	//draw 提示字串
	glPushMatrix();
		char *temp1= (char*)malloc(5 * sizeof(char));
		char *temp2 = (char*)malloc(5 * sizeof(char));
		char *temp3 = (char*)malloc(5 * sizeof(char));
		char* temp4 = (char*)malloc(5 * sizeof(char));
		char note[100]="";
		
		if (temp1 && temp2 && temp3) {
			strcpy(note, " Blue Model HP: ");
			snprintf(temp1, 5, "%d", hp1);
			strcat(note, temp1);
			glRasterPos2f(-6.5, 3.5); //字體位置	
			for (int i = 0; i < (int)strlen(note); i++) { //loop to display character by character
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, note[i]);
				//note[i] = '\0';
			}

			strcpy(note, "\nPink Model HP: ");
			snprintf(temp2, 5, "%d", hp2);
			strcat(note, temp2);
			glRasterPos2f(-6.5, 3.0); //字體位置	
			for (int i = 0; i < (int)strlen(note); i++) { //loop to display character by character
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, note[i]);
			}

			strcpy(note, "\nGreen Model HP: ");
			snprintf(temp3, 5, "%d", hp3);
			strcat(note, temp3);
			glRasterPos2f(-6.5, 2.5); //字體位置	
			for (int i = 0; i < (int)strlen(note); i++) { //loop to display character by character
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, note[i]);
			}

			strcpy(note, "\nMy HP: ");
			snprintf(temp4, 5, "%d", my_hp);
			strcat(note, temp4);
			glRasterPos2f(-6.5, 2.0); //字體位置	
			for (int i = 0; i < (int)strlen(note); i++) { //loop to display character by character
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, note[i]);
			}

			/*strcpy(note, "\n\nPress ESC to Exit");
			glRasterPos2f(-6.5, 2.0); //字體位置	
			for (int i = 0; i < (int)strlen(note); i++) { //loop to display character by character
				glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, note[i]);
			}*/
		}
	glPopMatrix();

	glutSwapBuffers();
}

void reshape(int width, int height)
{
	glViewport(0, 0, width, height); 
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();	
	gluPerspective(60.0, (GLfloat)width / (GLfloat)height, 0.1, 50.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key) {
		case 'w':
		case 'W':
			move_dir = 'w';
			glutPostRedisplay();
			break;

		case 'a':
		case 'A':
			move_dir = 'a';
			glutPostRedisplay();
			break;

		case 's':
		case 'S':
			move_dir = 's';
			glutPostRedisplay();
			break;

		case 'd':
		case 'D':
			move_dir = 'd';
			glutPostRedisplay();
			break;

		case 'x':
		case 'X':
			move_dir = 'x';
			glutPostRedisplay();
			break;

		case 'r':
		case 'R':
			move_dir = 'r';
			glutPostRedisplay();
			break;

		case 'c':
		case 'C':
			move_dir = 'c';
			if (anti_aliasing == false) anti_aliasing = true;
			else anti_aliasing = false;
			glutPostRedisplay();
			break;

		case 'f':
		case 'F':
			move_dir = 'f';
			if (fog == false) fog = true;
			else fog = false;
			glutPostRedisplay();
			break;

		case 'b':
		case 'B':
			move_dir = 'b'; 
			if (snipe == false) snipe = true;
			else snipe = false;
			glutPostRedisplay();
			break;

		case 'p':
		case 'P':
			move_dir = 'p';
			if (polygon_offset == false) polygon_offset = true;
			else polygon_offset = false;
			glutPostRedisplay();
			break;

		case ' ':
			if (jump == false) {
				jump = true; 
				is_down = true; //應該是往上跳，但logo是往下動，所以設成往下
				jump_time = 0; jump_y = 0;
			}
			glutPostRedisplay();
			break;

		case 27:
			exit(0);
			break;

		default:
			break;
	}
}

void mouse(int button, int state, int x, int y)
{
	switch (button)
	{
		case GLUT_LEFT_BUTTON:
			if (state == GLUT_DOWN){
				move_dir = 'z';
			}
			break;

		default:
			break;
	}

}

void init(void)
{
	GLfloat light_ambient[] = { 0.0, 0.0, 0.0, 1.0 };
	GLfloat light_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat light_specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat light_position[] = { 3.0, 3.0, -5.0, 0.0 };
	GLfloat spot_direction[] = { -1.0, -1.0, 0.0 };

	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
	glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);

	glLightf(GL_LIGHT0, GL_SPOT_CUTOFF, 60.0); // 設置聚光燈照亮的角度
	glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION, spot_direction); // 設置聚光燈朝的方向
	glLightf(GL_LIGHT0, GL_SPOT_EXPONENT, 0.0); //設置聚光燈的指數

	
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE); //不要讓glScalef()改到我的法向量
	glEnable(GL_DEPTH_TEST);

	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glShadeModel(GL_SMOOTH);
}

int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH | GLUT_MULTISAMPLE);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1200, 650);
	glutCreateWindow("國立中興大學");

	glewExperimental = GL_TRUE;
	if (glewInit()!=GLEW_OK) {
		exit(EXIT_FAILURE);
	}
	
	init();
	glutFullScreen();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouse);
	glutIdleFunc(auto_rotate);

	//loadObj("lamp.obj");
	glutMainLoop();

	return 0;
}
